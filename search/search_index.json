{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ALLFED Integrated Food System Model An integrated food supply model for resilient foods in nuclear winter Run the model You can create a variety of different scenarios with this model. A collection of possible scenarios are already available in the scenarios folder (e.g. run_model_with_resilient_foods.py ). Examples of usage can be found in the scripts folder. Resulting pptx can be found in results/large_reports/. If you don't wish to run these results yourself, you can find more pregenerated results in the Zenodo repository (https://zenodo.org/record/7039924). Running on command line (See Dependencies section first) Results from the paper can be rerun using the following commands in the src/scenarios folder python create_fig_1ab.py python create_fig_2abcde.py python create_fig_3abcd.py python run_model_baseline.py For the country-by-country no food trade model, run python run_baseline_by_country_no_trade.py if you want to recreate the figures and results from the Nature Foods paper. More Details See the zenodo repository for more results and reports: https://zenodo.org/record/7039924 A scenario is created by creating a new instance of the Scenario class in scenario.py . This class contains a collection of methods that provide your model with the parameter value it needs to run. Here you can also change the parameter values if you want to change the model to your specifications. Once you got all your parameter values ready you create an Instance of the Parameter class from parameter.py . This class allows you to initialize the model with the parameter values you defined. Finally to create an instance of the Optimizer class from optimizer.py and provide it with your parameters. This will run the model itself and optimize it. to see which parameters and scenarios can be set, look at src/scenarios/run_scenarios.py \"set_depending_on_option\" method How the model works in general Dependency management with Anaconda The integrated model is written in python 3, ensure you have some version of python3, although it has only been tested with python 3.9 or later. Then, install the required packages using conda or miniconda: You'll also need to install conda or miniconda or similar. See https://docs.anaconda.com/anaconda/install/index.html for installation instructions. Once the program is installed on your device, set up a separate environment for the project (do not use your base environment). This step and the following can be done in two ways: - using the GUI or - using the Anaconda Prompt. For people new to coding the GUI is more intuitive. GUI Open the Anaconda Navigator. Select the tap \"Environments\". Click \"Import\" and select the \"environment.yml\" file from the repository and name the new environment. All dependencies will be installed automatically. Anaconda Prompt Open Anaconda Prompt. Type in the following line: conda env create -f environment.yml The dependencies will be installed automatically and the environment will be name intmodel. If you close out the terminal and open it later you will want to activate the environment again using conda activate intmodel For both versions: Code from this project will only run smoothly when opened in the new environment and when the working directory is set to the path location of the repository on your machine. Detailed Explanation of Files and Folders in this Repository Below we explain all of the folders and files used for getting data, processing data, running simulations, then displaying and saving results of models. Files purely for documentation or creating the python environment are not included below. Directory Structure \u251c\u2500\u2500 data/ \u2502 \u2502 All the tabulated data used for the repository, as well as intermediary \u2502 processed results from import scripts. Also contains data explaining \u2502 assumptions of the model in the Supplemental_Data.xlsx file. \u2502 \u251c\u2500\u2500 results/ \u2502 \u2502 Outputs of the model including figures and pptx generated reports. \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 Convenient scripts used to run sets of python scripts. \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 All of the code used to model the food system and to run simulations. \u2502 data/ All data for the use of generating scenarios is contained in this directory, with the exception that some aggregate global constants for the food system are stored in the src/scenarios/scenarios.py file. (Note: currently getting rid of \"magic numbers\" in other files, but it is a long process) resilient_food_primary_results.npy , no_resilient_food_primary_results.npy These are used for plotting data from src/scenarios/plot_primary_food.py. Supplemental_Data.xlsx This is part of the raw data imported in the case of Nutrition, or used directly for estimating the performance of crop relocation or expected diet availability, as well as crop seasonality. The spreadsheet contains the following tabs: Summary of field margins Cost modelling Diet affordability Crop years Production & stocks seasonality Crop Model Results Crop Model ASRS Relocation Estimate Crop Model No Relocation Crop Model 2005 Production 2005 Production 2005 Raw Nutrition data/no_food_trade/ Contains data used to run the country-by-country no food trade model. processed_data/ All of the CSV files in this folder are generated by running the scripts/run_all_imports.sh file. They contain data in standard format for each country on values of interest for the food system models (for no food trade scenarios). raw_data/ All data files used for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. computer_readable_combined.csv The ultimate result from running all the import scripts in src/import_scripts_no_food_trade , (also accomplished using scripts/run_all_scripts.py ). In particular, the src/import_scripts_no_food_trade/import_food_data.py file creates this by merging the csvs into a dataframe then exporting the result to this csv. data/no_food_trade/raw_data/ Raw data files for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. FAOSTAT_*_.CSV Data files imported directly from FAOSTAT for the year in question. Integrated Model With No Food Trade.xlsx The spreadsheet is used as a remaining set of data pertaining to no food trade scenarios, which is imported in addition to raw FAOSTAT data to create the final computer_readable_code.csv file. Contains the following tabs: * Population * Food waste * Outdoor crop Production Seasonality * Outdoor Crop Production Baseline * Outdoor Crop Production NW * Food Stocks * Seafood - excluding seaweeds * Grazing * Seaweed * Cellulosic Sugar * Greenhouses * Methane SCP * Combined rutgers_nw_production_raw.csv Raw data provided by the Rutgers Toon group from Xia et al publication regarding grasses and staple crops (spring wheat, maize, soybean, rice) fractional crop yields to baseline in a 150 tg nuclear winter scenario. results/ Outputs of the model including figures and pptx generated reports. large_reports/ Reports generated with the run_model_no_trade_baseline.py , run_model_no_trade_no_resilient_foods.py , and run_model_no_trade_with_resilient_foods.py in src/scenarios/ . Figure_4/ Diagrammatic flow chart of the integrated model. *.fig Figures produced by running some src/scenarios/ files. The last stage of figure generation (plotting itself) always occurs in the src/utilities/plotter.py file. scripts/ Convenient scripts used to run sets of python scripts. create_all_no_trade_scenario_pptx.sh Generates a full set of results in results/large_reports/ by running run_model_no_trade scripts in src/scenarios/ , using both the \"single\" and \"multi\" arguments. run_all_imports.sh This script creates all the imported .csv files in the data/no_food_trade/processed_data folder, by running all the import_*_csv.py scripts in src/import_scripts_no_food_trade/ . It's required to run this for importing all the food system input data before running simulations if no_food_trade scenarios are being run. src/ All of the code used to model the food system and to run simulations food_system/ Called by the compute_parameters function in src/optimizer/parameters.py , each function represents a different part of the food system. import_scripts_no_food_trade/ This is required to be run before other files in src/ in order to import raw data into a usable format for other files in src/ . It is a set of scripts that are run to import food system data, typically by the scripts/run_all_imports.sh file. These create the imported .csv files in the data/no_food_trade/processed_data folder. It's required to run this for importing all the food system input data before running simulations for no_food_trade scenarios. src/optimizer/ The optimizer folder runs the following sequence in order for every scenario: compute_parameters, run_optimizer, extract_results, interpret_results, validate_results. The parameters.py file also imports all the src/food_system category-specific calculations. The results of parameters.py are sent to the optimizer.py through the constants_out variable. Optimization in optimizer uses the PuLP linear optimizer to optimally satisfy the series of constraints used in that model. src/scenarios/ Running a script in scenarios is done after completing import of the scripts, if no_food_trade scenarios are being run. Files in scenarios/ are either utility files used to specify the scenarios or provide an intermediary interface to allow other scripts to run the model in a particular way, scripts used to process and run specific scenarios for the nuclear winter with or without global food trade between trading blocs, or scripts which plot the results of these scenario runs. The scenarios are all either involving full food trade or no food trade between trading blocs, as determined by the trading bloc data in no_food_trade/computer_readable_combined.csv and globally-aggregated data stored in scenarios.py . Utility files used to specify the scenarios are: scenarios.py Utility files used to provide an intermediary interface to allow other scripts to run the model in a particular way are: run_model_no_trade.py , run_scenario.py Scripts used to process and run specific scenarios for the nuclear winter with global food trade between trading blocs: run_model_with_resilient_foods.py , run_model_baseline.py , run_model_no_resilient_foods.py , create_figure_3abcd.py Scripts which plot the results of these scenario runs: plot_primary_food.py Scripts used to process and run specific scenarios for the nuclear winter without global food trade between trading blocs: create_figure_1ab.py , create_figure_2abcde.py , run_model_no_trade_baseline.py , run_model_no_trade_no_resilient_foods.py , run_model_no_trade_with_resilient_foods.py , reproduce_xia_et_al_USA.py , run_USA_with_improved_numbers.py The files which simply plot results are: plot_primary_food.py The scenarios are run under a single set of assumptions or multiple sets of assumptions. Uses input data stored in data/no_food_trade/computer_readable_combined.csv . The python files in this directory are all the ways that the model can be run. Overall, the scripts in the scenarios folder interrelate as follows: ( run_model_with_resilient_foods.py , run_model_baseline.py , run_model_no_resilient_foods.py , create_figure_3abcd.py ) ==calls=for=each=scenario==> run_scenario.py ( create_figure_1ab.py , create_figure_2abcde.py , reproduce_xia_et_al_USA.py , run_USA_with_improved_numbers.py , run_model_no_trade_with_resilient_foods.py , run_model_no_trade_no_resilient_foods.py , run_model_no_trade_baseline.py ) ==call=with=scenarios=defined==> run_model_no_trade.py run_model_no_trade.py ==calls=for=each=scenario==> run_scenario.py In the case of no food trade: scenarios.py <==loads== data/no_food_trade/computer_readable_combined.csv run_scenario.py <==loads== scenarios.py Next, the run_scenario.py file calls the optimizer as follows in order to produce results for each scenario: run_scenario.py ==calls=in=this=order=> src/optimizer/parameters.py src/optimizer/optimizer.py src/optimizer/extract_results.py src/optimizer/interpret_results.py src/optimizer/validate_results.py Finally the results are returned from run_scenario back up the call chain in reverse order. utilities/ various useful utilities that are called elsewhere in the program, that do not serve any core function for the modelling. Notably, all the plotting code is located in the utilities directory.","title":"ALLFED Integrated Food System Model"},{"location":"#allfed-integrated-food-system-model","text":"An integrated food supply model for resilient foods in nuclear winter","title":"ALLFED Integrated Food System Model"},{"location":"#run-the-model","text":"You can create a variety of different scenarios with this model. A collection of possible scenarios are already available in the scenarios folder (e.g. run_model_with_resilient_foods.py ). Examples of usage can be found in the scripts folder. Resulting pptx can be found in results/large_reports/. If you don't wish to run these results yourself, you can find more pregenerated results in the Zenodo repository (https://zenodo.org/record/7039924).","title":"Run the model"},{"location":"#running-on-command-line","text":"(See Dependencies section first) Results from the paper can be rerun using the following commands in the src/scenarios folder python create_fig_1ab.py python create_fig_2abcde.py python create_fig_3abcd.py python run_model_baseline.py For the country-by-country no food trade model, run python run_baseline_by_country_no_trade.py if you want to recreate the figures and results from the Nature Foods paper.","title":"Running on command line"},{"location":"#more-details","text":"See the zenodo repository for more results and reports: https://zenodo.org/record/7039924 A scenario is created by creating a new instance of the Scenario class in scenario.py . This class contains a collection of methods that provide your model with the parameter value it needs to run. Here you can also change the parameter values if you want to change the model to your specifications. Once you got all your parameter values ready you create an Instance of the Parameter class from parameter.py . This class allows you to initialize the model with the parameter values you defined. Finally to create an instance of the Optimizer class from optimizer.py and provide it with your parameters. This will run the model itself and optimize it. to see which parameters and scenarios can be set, look at src/scenarios/run_scenarios.py \"set_depending_on_option\" method","title":"More Details"},{"location":"#how-the-model-works-in-general","text":"","title":"How the model works in general"},{"location":"#dependency-management-with-anaconda","text":"The integrated model is written in python 3, ensure you have some version of python3, although it has only been tested with python 3.9 or later. Then, install the required packages using conda or miniconda: You'll also need to install conda or miniconda or similar. See https://docs.anaconda.com/anaconda/install/index.html for installation instructions. Once the program is installed on your device, set up a separate environment for the project (do not use your base environment). This step and the following can be done in two ways: - using the GUI or - using the Anaconda Prompt. For people new to coding the GUI is more intuitive.","title":"Dependency management with Anaconda"},{"location":"#gui","text":"Open the Anaconda Navigator. Select the tap \"Environments\". Click \"Import\" and select the \"environment.yml\" file from the repository and name the new environment. All dependencies will be installed automatically.","title":"GUI"},{"location":"#anaconda-prompt","text":"Open Anaconda Prompt. Type in the following line: conda env create -f environment.yml The dependencies will be installed automatically and the environment will be name intmodel. If you close out the terminal and open it later you will want to activate the environment again using conda activate intmodel For both versions: Code from this project will only run smoothly when opened in the new environment and when the working directory is set to the path location of the repository on your machine.","title":"Anaconda Prompt"},{"location":"#detailed-explanation-of-files-and-folders-in-this-repository","text":"Below we explain all of the folders and files used for getting data, processing data, running simulations, then displaying and saving results of models. Files purely for documentation or creating the python environment are not included below.","title":"Detailed Explanation of Files and Folders in this Repository"},{"location":"#directory-structure","text":"\u251c\u2500\u2500 data/ \u2502 \u2502 All the tabulated data used for the repository, as well as intermediary \u2502 processed results from import scripts. Also contains data explaining \u2502 assumptions of the model in the Supplemental_Data.xlsx file. \u2502 \u251c\u2500\u2500 results/ \u2502 \u2502 Outputs of the model including figures and pptx generated reports. \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 Convenient scripts used to run sets of python scripts. \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 All of the code used to model the food system and to run simulations. \u2502","title":"Directory Structure"},{"location":"#data","text":"All data for the use of generating scenarios is contained in this directory, with the exception that some aggregate global constants for the food system are stored in the src/scenarios/scenarios.py file. (Note: currently getting rid of \"magic numbers\" in other files, but it is a long process) resilient_food_primary_results.npy , no_resilient_food_primary_results.npy These are used for plotting data from src/scenarios/plot_primary_food.py. Supplemental_Data.xlsx This is part of the raw data imported in the case of Nutrition, or used directly for estimating the performance of crop relocation or expected diet availability, as well as crop seasonality. The spreadsheet contains the following tabs: Summary of field margins Cost modelling Diet affordability Crop years Production & stocks seasonality Crop Model Results Crop Model ASRS Relocation Estimate Crop Model No Relocation Crop Model 2005 Production 2005 Production 2005 Raw Nutrition","title":"data/"},{"location":"#datano_food_trade","text":"Contains data used to run the country-by-country no food trade model. processed_data/ All of the CSV files in this folder are generated by running the scripts/run_all_imports.sh file. They contain data in standard format for each country on values of interest for the food system models (for no food trade scenarios). raw_data/ All data files used for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. computer_readable_combined.csv The ultimate result from running all the import scripts in src/import_scripts_no_food_trade , (also accomplished using scripts/run_all_scripts.py ). In particular, the src/import_scripts_no_food_trade/import_food_data.py file creates this by merging the csvs into a dataframe then exporting the result to this csv.","title":"data/no_food_trade/"},{"location":"#datano_food_traderaw_data","text":"Raw data files for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. FAOSTAT_*_.CSV Data files imported directly from FAOSTAT for the year in question. Integrated Model With No Food Trade.xlsx The spreadsheet is used as a remaining set of data pertaining to no food trade scenarios, which is imported in addition to raw FAOSTAT data to create the final computer_readable_code.csv file. Contains the following tabs: * Population * Food waste * Outdoor crop Production Seasonality * Outdoor Crop Production Baseline * Outdoor Crop Production NW * Food Stocks * Seafood - excluding seaweeds * Grazing * Seaweed * Cellulosic Sugar * Greenhouses * Methane SCP * Combined rutgers_nw_production_raw.csv Raw data provided by the Rutgers Toon group from Xia et al publication regarding grasses and staple crops (spring wheat, maize, soybean, rice) fractional crop yields to baseline in a 150 tg nuclear winter scenario.","title":"data/no_food_trade/raw_data/"},{"location":"#results","text":"Outputs of the model including figures and pptx generated reports. large_reports/ Reports generated with the run_model_no_trade_baseline.py , run_model_no_trade_no_resilient_foods.py , and run_model_no_trade_with_resilient_foods.py in src/scenarios/ . Figure_4/ Diagrammatic flow chart of the integrated model. *.fig Figures produced by running some src/scenarios/ files. The last stage of figure generation (plotting itself) always occurs in the src/utilities/plotter.py file.","title":"results/"},{"location":"#scripts","text":"Convenient scripts used to run sets of python scripts. create_all_no_trade_scenario_pptx.sh Generates a full set of results in results/large_reports/ by running run_model_no_trade scripts in src/scenarios/ , using both the \"single\" and \"multi\" arguments. run_all_imports.sh This script creates all the imported .csv files in the data/no_food_trade/processed_data folder, by running all the import_*_csv.py scripts in src/import_scripts_no_food_trade/ . It's required to run this for importing all the food system input data before running simulations if no_food_trade scenarios are being run.","title":"scripts/"},{"location":"#src","text":"All of the code used to model the food system and to run simulations food_system/ Called by the compute_parameters function in src/optimizer/parameters.py , each function represents a different part of the food system. import_scripts_no_food_trade/ This is required to be run before other files in src/ in order to import raw data into a usable format for other files in src/ . It is a set of scripts that are run to import food system data, typically by the scripts/run_all_imports.sh file. These create the imported .csv files in the data/no_food_trade/processed_data folder. It's required to run this for importing all the food system input data before running simulations for no_food_trade scenarios.","title":"src/"},{"location":"#srcoptimizer","text":"The optimizer folder runs the following sequence in order for every scenario: compute_parameters, run_optimizer, extract_results, interpret_results, validate_results. The parameters.py file also imports all the src/food_system category-specific calculations. The results of parameters.py are sent to the optimizer.py through the constants_out variable. Optimization in optimizer uses the PuLP linear optimizer to optimally satisfy the series of constraints used in that model.","title":"src/optimizer/"},{"location":"#srcscenarios","text":"Running a script in scenarios is done after completing import of the scripts, if no_food_trade scenarios are being run. Files in scenarios/ are either utility files used to specify the scenarios or provide an intermediary interface to allow other scripts to run the model in a particular way, scripts used to process and run specific scenarios for the nuclear winter with or without global food trade between trading blocs, or scripts which plot the results of these scenario runs. The scenarios are all either involving full food trade or no food trade between trading blocs, as determined by the trading bloc data in no_food_trade/computer_readable_combined.csv and globally-aggregated data stored in scenarios.py . Utility files used to specify the scenarios are: scenarios.py Utility files used to provide an intermediary interface to allow other scripts to run the model in a particular way are: run_model_no_trade.py , run_scenario.py Scripts used to process and run specific scenarios for the nuclear winter with global food trade between trading blocs: run_model_with_resilient_foods.py , run_model_baseline.py , run_model_no_resilient_foods.py , create_figure_3abcd.py Scripts which plot the results of these scenario runs: plot_primary_food.py Scripts used to process and run specific scenarios for the nuclear winter without global food trade between trading blocs: create_figure_1ab.py , create_figure_2abcde.py , run_model_no_trade_baseline.py , run_model_no_trade_no_resilient_foods.py , run_model_no_trade_with_resilient_foods.py , reproduce_xia_et_al_USA.py , run_USA_with_improved_numbers.py The files which simply plot results are: plot_primary_food.py The scenarios are run under a single set of assumptions or multiple sets of assumptions. Uses input data stored in data/no_food_trade/computer_readable_combined.csv . The python files in this directory are all the ways that the model can be run. Overall, the scripts in the scenarios folder interrelate as follows: ( run_model_with_resilient_foods.py , run_model_baseline.py , run_model_no_resilient_foods.py , create_figure_3abcd.py ) ==calls=for=each=scenario==> run_scenario.py ( create_figure_1ab.py , create_figure_2abcde.py , reproduce_xia_et_al_USA.py , run_USA_with_improved_numbers.py , run_model_no_trade_with_resilient_foods.py , run_model_no_trade_no_resilient_foods.py , run_model_no_trade_baseline.py ) ==call=with=scenarios=defined==> run_model_no_trade.py run_model_no_trade.py ==calls=for=each=scenario==> run_scenario.py In the case of no food trade: scenarios.py <==loads== data/no_food_trade/computer_readable_combined.csv run_scenario.py <==loads== scenarios.py Next, the run_scenario.py file calls the optimizer as follows in order to produce results for each scenario: run_scenario.py ==calls=in=this=order=> src/optimizer/parameters.py src/optimizer/optimizer.py src/optimizer/extract_results.py src/optimizer/interpret_results.py src/optimizer/validate_results.py Finally the results are returned from run_scenario back up the call chain in reverse order. utilities/ various useful utilities that are called elsewhere in the program, that do not serve any core function for the modelling. Notably, all the plotting code is located in the utilities directory.","title":"src/scenarios/"},{"location":"modules/src/food_system/calculate_animals_and_feed_over_time/","text":"CalculateAnimalOutputs source Methods: .calculate_feed_and_animals_using_baseline_feed_usage source .calculate_feed_and_animals_using_baseline_feed_usage( reduction_in_beef_calves, reduction_in_dairy_calves, increase_in_slaughter, reduction_in_pig_breeding, reduction_in_poultry_breeding, months, discount_rate, mother_slaughter, use_grass_and_residues_for_dairy, baseline_kcals_per_month_feed ) the way this function works, is it first calculates the expected feed tons in baseline conditions, and compares it to known feed calories in baseline, and uses this information to determine the caloric density of feed then it calculates the feed usage for the actual scenario. .calculate_feed_and_animals source .calculate_feed_and_animals( reduction_in_beef_calves, reduction_in_dairy_calves, increase_in_slaughter, reduction_in_pig_breeding, reduction_in_poultry_breeding, months, discount_rate, mother_slaughter, use_grass_and_residues_for_dairy, tons_to_kcals ) Inputs: reduction_in_beef_calves: Reduction in Beef Birth Rate reduction_in_dairy_calves: Reduction in Dairy Birth Rate increase_in_slaughter: So 20% indicates an 80% drop in baseline sluaghter rates in slaughterhouses reduction_in_pig_breeding: Reduction Pig Breeding 100(=100% reduction) means that all insemination and breeding stops on day 0 ( with the corresponding drop in birth rate happening 9 months later for cows, 1 month for chickens, 4 months pigs (as per gestation variables)) reduction_in_poultry_breeding: Reduction Poultry Breeding months: Months to simulate discount_rate: discount_rate: Discount Rate for Labour/Technology Transfer between species mother_slaughter: Proportion of Slaughter which is mothers (In a normal slaughtering regime pregnant animals are not killed. mother_slaughter is a percentage of how much of the slaughtering capacity will be used on pregnant animals.) use_grass_and_residues_for_dairy: Whether to Use Residues for Dairy tons_to_kcals: calories per ton of feed ModelAnimalInputs source ModelAnimalInputs( dataframe )","title":"Calculate animals and feed over time"},{"location":"modules/src/food_system/calculate_animals_and_feed_over_time/#_1","text":"","title":""},{"location":"modules/src/food_system/calculate_animals_and_feed_over_time/#calculateanimaloutputs","text":"source Methods:","title":"CalculateAnimalOutputs"},{"location":"modules/src/food_system/calculate_animals_and_feed_over_time/#calculate_feed_and_animals_using_baseline_feed_usage","text":"source .calculate_feed_and_animals_using_baseline_feed_usage( reduction_in_beef_calves, reduction_in_dairy_calves, increase_in_slaughter, reduction_in_pig_breeding, reduction_in_poultry_breeding, months, discount_rate, mother_slaughter, use_grass_and_residues_for_dairy, baseline_kcals_per_month_feed ) the way this function works, is it first calculates the expected feed tons in baseline conditions, and compares it to known feed calories in baseline, and uses this information to determine the caloric density of feed then it calculates the feed usage for the actual scenario.","title":".calculate_feed_and_animals_using_baseline_feed_usage"},{"location":"modules/src/food_system/calculate_animals_and_feed_over_time/#calculate_feed_and_animals","text":"source .calculate_feed_and_animals( reduction_in_beef_calves, reduction_in_dairy_calves, increase_in_slaughter, reduction_in_pig_breeding, reduction_in_poultry_breeding, months, discount_rate, mother_slaughter, use_grass_and_residues_for_dairy, tons_to_kcals ) Inputs: reduction_in_beef_calves: Reduction in Beef Birth Rate reduction_in_dairy_calves: Reduction in Dairy Birth Rate increase_in_slaughter: So 20% indicates an 80% drop in baseline sluaghter rates in slaughterhouses reduction_in_pig_breeding: Reduction Pig Breeding 100(=100% reduction) means that all insemination and breeding stops on day 0 ( with the corresponding drop in birth rate happening 9 months later for cows, 1 month for chickens, 4 months pigs (as per gestation variables)) reduction_in_poultry_breeding: Reduction Poultry Breeding months: Months to simulate discount_rate: discount_rate: Discount Rate for Labour/Technology Transfer between species mother_slaughter: Proportion of Slaughter which is mothers (In a normal slaughtering regime pregnant animals are not killed. mother_slaughter is a percentage of how much of the slaughtering capacity will be used on pregnant animals.) use_grass_and_residues_for_dairy: Whether to Use Residues for Dairy tons_to_kcals: calories per ton of feed","title":".calculate_feed_and_animals"},{"location":"modules/src/food_system/calculate_animals_and_feed_over_time/#modelanimalinputs","text":"source ModelAnimalInputs( dataframe )","title":"ModelAnimalInputs"},{"location":"modules/src/food_system/cellulosic_sugar/","text":"CellulosicSugar source CellulosicSugar( constants_for_params ) Methods: .calculate_monthly_cs_production source .calculate_monthly_cs_production( constants_for_params ) .get_monthly_cs_production source .get_monthly_cs_production()","title":"Cellulosic sugar"},{"location":"modules/src/food_system/cellulosic_sugar/#_1","text":"","title":""},{"location":"modules/src/food_system/cellulosic_sugar/#cellulosicsugar","text":"source CellulosicSugar( constants_for_params ) Methods:","title":"CellulosicSugar"},{"location":"modules/src/food_system/cellulosic_sugar/#calculate_monthly_cs_production","text":"source .calculate_monthly_cs_production( constants_for_params )","title":".calculate_monthly_cs_production"},{"location":"modules/src/food_system/cellulosic_sugar/#get_monthly_cs_production","text":"source .get_monthly_cs_production()","title":".get_monthly_cs_production"},{"location":"modules/src/food_system/feed_and_biofuels/","text":"FeedAndBiofuels source FeedAndBiofuels( constants_for_params ) Methods: .set_nonhuman_consumption_with_cap source .set_nonhuman_consumption_with_cap( constants_for_params, outdoor_crops, stored_food, biofuels_before_cap_prewaste, feed_before_cap_prewaste, excess_feed_prewaste ) NOTE: This function depends on get_excess being run first! Cap biofuel usage to the amount of food available (stored food plus outdoor crops) This takes all the outdoor growing in each month in which feed and biofuel would be used. First, the amount of food from the outdoor crops is subtracted from the net feed plus biofuel previously assigned to be used. If kcals, fat, and protein used by biofuels plus feed is always less than outdoor growing, then nothing is changed and the program returns. If kcals, fat, and protein used by biofuels plus feed is greater in any of the months than outdoor growing, then the sum of all of these exceedances from what is grown is summed. If the sum of exceedances is greater than any of the macronutrients summed from stored food, then the amount of biofuels is reduced such that the sum of exceedances uses exactly as much stored food is available. However, if there was an excess feed assigned in the EXCESS_FEED variable, then this implies that a diet calculation is being run, in order to reduce the calories per person per day to 2100. This should NEVER be run in the context of feed and biofuels exceeding available outdoor growing and stored food, because in that case there would not be nearly enough calories to go around. Therefore, the program will raise an error if this occurs. If the biofuels are reduced to zero, then the remaining exceedance is subtracted from the feed usage until exceedances use exactly as much stored food is available. In the case that the stored food is zero, this means that biofuels plus feed will be capped to the outdoor production of any macronutrient in any month. .get_biofuels_and_feed_before_waste_from_delayed_shutoff source .get_biofuels_and_feed_before_waste_from_delayed_shutoff( constants_for_params ) .get_biofuels_and_feed_before_waste_from_animal_pops source .get_biofuels_and_feed_before_waste_from_animal_pops( constants_for_params, feed_over_time ) .set_biofuels_and_feed_usage_postwaste source .set_biofuels_and_feed_usage_postwaste( max_net_demand, stored_food, outdoor_crops, biofuels_before_cap, feed_before_cap, excess_feed_prewaste ) .iteratively_determine_reduction_in_nonhuman_consumption_postwaste source .iteratively_determine_reduction_in_nonhuman_consumption_postwaste( stored_food, outdoor_crops, biofuels_before_cap, feed_before_cap ) This function iteratively determines the amount of nonhuman consumption by reducing the amount of biofuels and feed used. .get_biofuel_usage_before_cap_prewaste source .get_biofuel_usage_before_cap_prewaste( biofuel_duration ) This function is used to get the biofuel usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero biofuel months for biofuels to be used. pre waste: this is the actual amount used of stored food and crops before waste is applied to crops and stored food .get_feed_usage_before_cap_prewaste source .get_feed_usage_before_cap_prewaste( feed_duration, excess_feed_prewaste ) This function is used to get the feed usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero feed months for feeds to be used. .get_nonhuman_consumption_before_cap_prewaste source .get_nonhuman_consumption_before_cap_prewaste( biofuels_before_cap_prewaste, feed_before_cap_prewaste ) Calculate and set the total usage for consumption of biofuels and feed .get_nonhuman_consumption_with_cap_postwaste source .get_nonhuman_consumption_with_cap_postwaste( constants_for_params, biofuels, feed ) Calculate and set the total usage for consumption of biofuels and feed assume animals need and use human levels of fat and protein per kcal .calculate_max_running_net_demand_postwaste source .calculate_max_running_net_demand_postwaste( outdoor_crops, biofuels_before_cap, feed_before_cap ) Calculate the exceedance of the biofuel and feed usage past the outdoor outdoor_crops production on a monthly basis for each nutrient. NOTE: UPDATE I realized that the max amount of stored food or OG used each month by kcals, fat or protein needs to be summed, rather than the max of each individual nutrient Example kcals : 10, 20, 10, 10 fat: 10, 30, 20, 20 protein: 10, 30, 20, 20 month: 1 2 3 4 kcals : 5, 20, 10, 15 fat: 5, 15, 25, 20 protein: 25, 15, 20, 20 month: 1 2 3 4 kcals : 5, 0, 0, -5 fat: 5, 15, -5, 0 protein:-15, 15, 0, 0 month: 1 2 3 4 kcals : 5, 5, 5, 0 fat: 5, 20, 15, 15 protein:-15, 0, 0, 0 month: 1 2 3 4 kcals : 0 fat: 5 protein:-15 month: allmonths kcals : 0 fat: -5 protein: 15 month: allmonths outdoor crops: nonhuman_consumption: supply_minus_demand: running_net_supply: min_running_net_supply: max_running_net_demand: For all month combined, how much original stored food is needed to make up for each macronutrient? Answer: We sum up all the discrepancies between supply and demand. The stored food will need to make up for the minimum total shortage added up. .get_excess_food_usage_from_percents source .get_excess_food_usage_from_percents( excess_feed_percent )","title":"Feed and biofuels"},{"location":"modules/src/food_system/feed_and_biofuels/#_1","text":"","title":""},{"location":"modules/src/food_system/feed_and_biofuels/#feedandbiofuels","text":"source FeedAndBiofuels( constants_for_params ) Methods:","title":"FeedAndBiofuels"},{"location":"modules/src/food_system/feed_and_biofuels/#set_nonhuman_consumption_with_cap","text":"source .set_nonhuman_consumption_with_cap( constants_for_params, outdoor_crops, stored_food, biofuels_before_cap_prewaste, feed_before_cap_prewaste, excess_feed_prewaste )","title":".set_nonhuman_consumption_with_cap"},{"location":"modules/src/food_system/feed_and_biofuels/#note-this-function-depends-on-get_excess-being-run-first","text":"Cap biofuel usage to the amount of food available (stored food plus outdoor crops) This takes all the outdoor growing in each month in which feed and biofuel would be used. First, the amount of food from the outdoor crops is subtracted from the net feed plus biofuel previously assigned to be used. If kcals, fat, and protein used by biofuels plus feed is always less than outdoor growing, then nothing is changed and the program returns. If kcals, fat, and protein used by biofuels plus feed is greater in any of the months than outdoor growing, then the sum of all of these exceedances from what is grown is summed. If the sum of exceedances is greater than any of the macronutrients summed from stored food, then the amount of biofuels is reduced such that the sum of exceedances uses exactly as much stored food is available. However, if there was an excess feed assigned in the EXCESS_FEED variable, then this implies that a diet calculation is being run, in order to reduce the calories per person per day to 2100. This should NEVER be run in the context of feed and biofuels exceeding available outdoor growing and stored food, because in that case there would not be nearly enough calories to go around. Therefore, the program will raise an error if this occurs. If the biofuels are reduced to zero, then the remaining exceedance is subtracted from the feed usage until exceedances use exactly as much stored food is available. In the case that the stored food is zero, this means that biofuels plus feed will be capped to the outdoor production of any macronutrient in any month.","title":"NOTE: This function depends on get_excess being run first!"},{"location":"modules/src/food_system/feed_and_biofuels/#get_biofuels_and_feed_before_waste_from_delayed_shutoff","text":"source .get_biofuels_and_feed_before_waste_from_delayed_shutoff( constants_for_params )","title":".get_biofuels_and_feed_before_waste_from_delayed_shutoff"},{"location":"modules/src/food_system/feed_and_biofuels/#get_biofuels_and_feed_before_waste_from_animal_pops","text":"source .get_biofuels_and_feed_before_waste_from_animal_pops( constants_for_params, feed_over_time )","title":".get_biofuels_and_feed_before_waste_from_animal_pops"},{"location":"modules/src/food_system/feed_and_biofuels/#set_biofuels_and_feed_usage_postwaste","text":"source .set_biofuels_and_feed_usage_postwaste( max_net_demand, stored_food, outdoor_crops, biofuels_before_cap, feed_before_cap, excess_feed_prewaste )","title":".set_biofuels_and_feed_usage_postwaste"},{"location":"modules/src/food_system/feed_and_biofuels/#iteratively_determine_reduction_in_nonhuman_consumption_postwaste","text":"source .iteratively_determine_reduction_in_nonhuman_consumption_postwaste( stored_food, outdoor_crops, biofuels_before_cap, feed_before_cap ) This function iteratively determines the amount of nonhuman consumption by reducing the amount of biofuels and feed used.","title":".iteratively_determine_reduction_in_nonhuman_consumption_postwaste"},{"location":"modules/src/food_system/feed_and_biofuels/#get_biofuel_usage_before_cap_prewaste","text":"source .get_biofuel_usage_before_cap_prewaste( biofuel_duration ) This function is used to get the biofuel usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero biofuel months for biofuels to be used. pre waste: this is the actual amount used of stored food and crops before waste is applied to crops and stored food","title":".get_biofuel_usage_before_cap_prewaste"},{"location":"modules/src/food_system/feed_and_biofuels/#get_feed_usage_before_cap_prewaste","text":"source .get_feed_usage_before_cap_prewaste( feed_duration, excess_feed_prewaste ) This function is used to get the feed usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero feed months for feeds to be used.","title":".get_feed_usage_before_cap_prewaste"},{"location":"modules/src/food_system/feed_and_biofuels/#get_nonhuman_consumption_before_cap_prewaste","text":"source .get_nonhuman_consumption_before_cap_prewaste( biofuels_before_cap_prewaste, feed_before_cap_prewaste ) Calculate and set the total usage for consumption of biofuels and feed","title":".get_nonhuman_consumption_before_cap_prewaste"},{"location":"modules/src/food_system/feed_and_biofuels/#get_nonhuman_consumption_with_cap_postwaste","text":"source .get_nonhuman_consumption_with_cap_postwaste( constants_for_params, biofuels, feed ) Calculate and set the total usage for consumption of biofuels and feed assume animals need and use human levels of fat and protein per kcal","title":".get_nonhuman_consumption_with_cap_postwaste"},{"location":"modules/src/food_system/feed_and_biofuels/#calculate_max_running_net_demand_postwaste","text":"source .calculate_max_running_net_demand_postwaste( outdoor_crops, biofuels_before_cap, feed_before_cap ) Calculate the exceedance of the biofuel and feed usage past the outdoor outdoor_crops production on a monthly basis for each nutrient. NOTE: UPDATE I realized that the max amount of stored food or OG used each month by kcals, fat or protein needs to be summed, rather than the max of each individual nutrient Example kcals : 10, 20, 10, 10 fat: 10, 30, 20, 20 protein: 10, 30, 20, 20 month: 1 2 3 4 kcals : 5, 20, 10, 15 fat: 5, 15, 25, 20 protein: 25, 15, 20, 20 month: 1 2 3 4 kcals : 5, 0, 0, -5 fat: 5, 15, -5, 0 protein:-15, 15, 0, 0 month: 1 2 3 4 kcals : 5, 5, 5, 0 fat: 5, 20, 15, 15 protein:-15, 0, 0, 0 month: 1 2 3 4 kcals : 0 fat: 5 protein:-15 month: allmonths kcals : 0 fat: -5 protein: 15 month: allmonths outdoor crops: nonhuman_consumption: supply_minus_demand: running_net_supply: min_running_net_supply: max_running_net_demand: For all month combined, how much original stored food is needed to make up for each macronutrient? Answer: We sum up all the discrepancies between supply and demand. The stored food will need to make up for the minimum total shortage added up.","title":".calculate_max_running_net_demand_postwaste"},{"location":"modules/src/food_system/feed_and_biofuels/#get_excess_food_usage_from_percents","text":"source .get_excess_food_usage_from_percents( excess_feed_percent )","title":".get_excess_food_usage_from_percents"},{"location":"modules/src/food_system/food/","text":"Food source Food( kcals = 0, fat = 0, protein = 0, kcals_units = 'billionkcals', fat_units = 'thousandtons', protein_units = 'thousandtons' ) A food always has calories, fat, and protein. Food applies to biofuels and feed properties as well. A food always has units for each nutrient and these need to match when combining foods in some way, such as adding up, multiplying, or dividing their nutrients Best practice is to alter the food's units to be as specific as possible to prevent errors in the calculation. Here are some examples of using the food class: CONVENTIONS: A nutrient with a list of the value for each month, will need to have \" each month\" at the end of the units. A nutrient that represents the value for every month must have a \" per month\" at the end of the units. A nutrient with a single value all summed up over all time periods must not contain any \" each month\" or \" per month\" in the units. example_food=Food(10,3,1) (defaults to billion kcals, thousand tons monthly fat, thousand tons monthly protein) print(example_food): protein: 1 thousand tons >>> kcals_units = 'ratio minimum global needs per year', >>> fat_units = 'ratio minimum global needs per year', >>> protein_units = 'ratio minimum global needs per year', >>> ) >>> print(example_food): protein: 1 ratio minimum global needs per year (in order to get a min nutrient, you need to make sure the units are all the same) (in reality, you would want to divide the values by the actual global needs above) print(example_food.get_min_nutrient()) ('protein', 1) >>> example_food_monthly.set_units( >>> kcals_units = 'ratio minimum global needs per month', >>> fat_units = 'ratio minimum global needs per month', >>> protein_units = 'ratio minimum global needs per month', >>> ) print(example_food_monthly) protein: 0.08333333333333333 ratio minimum global needs per month >>> example_food_all_months = Food( >>> [example_food_monthly.kcals] * NMONTHS, >>> [example_food_monthly.fat] * NMONTHS, >>> [example_food_monthly.protein] * NMONTHS, >>> ) >>> example_food_all_months.set_units( >>> kcals_units = 'ratio minimum global needs each month', >>> fat_units = 'ratio minimum global needs each month', >>> protein_units = 'ratio minimum global needs each month', >>> ) >>> print(example_food_all_months) ratio minimum global needs each month Methods: .validate_if_list source .validate_if_list() Runs all the checks to make sure the list is properly set up .make_sure_not_a_list source .make_sure_not_a_list() throw an error if any of the food nutrients are a list .make_sure_is_a_list source .make_sure_is_a_list() throw an error if any of the food nutrients is not a list, then validate list properties .ensure_other_list_zero_if_this_is_zero source .ensure_other_list_zero_if_this_is_zero( other_list ) Get the value of the elements where the passed in list is zero, otherwise returned elements are zero. .make_sure_fat_protein_zero_if_kcals_is_zero source .make_sure_fat_protein_zero_if_kcals_is_zero() Get the value of the elements where the passed in list is zero, otherwise returned elements are zero. .make_sure_not_nan source .make_sure_not_nan() Make sure that the food is not a nan number, or fail the assertion .plot source .plot( title = 'genericfoodobjectovertime' ) Use the plotter to plot this food's properties. .is_list_monthly source .is_list_monthly() return whether this is a list .is_never_negative source .is_never_negative() Checks wether the food's macronutrients are never negative. .all_greater_than source .all_greater_than( other ) Returns True if the food's macronutrients are greater than the other food's. .all_less_than source .all_less_than( other ) Returns True if the food's macronutrients are greater than the other food's. .any_greater_than source .any_greater_than( other ) Returns True if the food's macronutrients are greater than the other food's. .any_less_than source .any_less_than( other ) Returns True if the food's macronutrients are less than the other food's. .all_greater_than_or_equal_to source .all_greater_than_or_equal_to( other ) Returns True if the food's macronutrients are greater than or equal to the other food's. .all_less_than_or_equal_to source .all_less_than_or_equal_to( other ) Returns :True if the food's macronutrients are less than or equal to the other food's. cases: this is food, other is food this is food, other is food list this is food list, other is food this is food list, other is food list .any_greater_than_or_equal_to source .any_greater_than_or_equal_to( other ) Returns True if the food's macronutrients are greater than or equal to the other food's. .any_less_than_or_equal_to source .any_less_than_or_equal_to( other ) Returns True if the food's macronutrients are less than or equal to the other food's. .all_equals_zero source .all_equals_zero() Returns True if the food's macronutrients are equal to zero. .any_equals_zero source .any_equals_zero() Returns True if the food's macronutrients are equal to zero. .all_greater_than_zero source .all_greater_than_zero() Returns True if the food's macronutrients are greater than zero. .any_greater_than_zero source .any_greater_than_zero() Returns True if any of the food's macronutrients are greater than zero. .all_greater_than_or_equal_to_zero source .all_greater_than_or_equal_to_zero() Returns True if the food's macronutrients are greater than or equal to zero. .as_numpy_array source .as_numpy_array() Returns the nutrients as an ordered numpy_array. .get_min_nutrient source .get_min_nutrient() Returns the minimum nutrient of the food. Can return the minimum of any month of any nutrient if a food list, or just `the minimum of any nutrient if a food Only works when the units is identical for the different nutrients Returns (minimum nutrient name, minimum nutrient value) .get_max_nutrient source .get_max_nutrient() Returns the maximum nutrient of the food. NOTE: only works on single valued instances of nutrients, not arrays. Returns (maximum nutrient name, maximum nutrient value) .get_nutrients_sum source .get_nutrients_sum() Sum up the nutrients in all the months, then alter the units to remove \"each month\" .get_running_total_nutrients_sum source .get_running_total_nutrients_sum() Running sum of the nutrients in all the months, don't alter units .get_amount_used_other_food source .get_amount_used_other_food( other_fat_ratio, other_protein_ratio ) Running sum of the amount used of the other food each month. Function used to determine the amount of stored food or outdoor growing that is used by biofuels and feed this is determined by taking the max amount used of the three nutrients, which is satisfied by a certain number of units of the other food. Surplus of the nutrients used is not used at all in the calculation. .get_consumed_amount source .get_consumed_amount( demand_to_be_met, used_nutrient_ratio ) returns the amount used of the demand_to_be_met a food with a given used_nutrient_ratio. The maximum nutrient used is used to determine the amount of the consumed food will be used. .get_first_month source .get_first_month() Just get the first month's nutrient values and convert the units from \"each\" to \"per\" .get_month source .get_month( index ) Get the i month's nutrient values, and convert the units from \"each\" to \"per\" .get_min_all_months source .get_min_all_months() create a food with the minimum of every month as a total nutrient .get_max_all_months source .get_max_all_months() create a food with the maximum of every month as a total nutrient .negative_values_to_zero source .negative_values_to_zero() Replace negative values with zero for each month for all nutrients. Also tests that the function worked. Returns the relevant food object with negative values replaced .get_rounded_to_decimal source .get_rounded_to_decimal( decimals ) Round to the nearest decimal place to give you an idea how this works: np.round([1,-1,.1,-.1,0.01,-0.01],decimals=1) array([ 1. , -1. , 0.1, -0.1, 0. , -0. ]) NOTE: only implemented for lists at the moment .replace_if_list_with_zeros_is_zero source .replace_if_list_with_zeros_is_zero( list_with_zeros, replacement ) replace with the replacement if list_with_zeros is zero arguments: list with zeros ( food list ): a list that has zeros in it the elements returns: itself, but with places list_with_zeros zero replaced with replacement .set_to_zero_after_month source .set_to_zero_after_month( month ) set all values after the month to zero","title":"Food"},{"location":"modules/src/food_system/food/#_1","text":"","title":""},{"location":"modules/src/food_system/food/#food","text":"source Food( kcals = 0, fat = 0, protein = 0, kcals_units = 'billionkcals', fat_units = 'thousandtons', protein_units = 'thousandtons' ) A food always has calories, fat, and protein. Food applies to biofuels and feed properties as well. A food always has units for each nutrient and these need to match when combining foods in some way, such as adding up, multiplying, or dividing their nutrients Best practice is to alter the food's units to be as specific as possible to prevent errors in the calculation. Here are some examples of using the food class: CONVENTIONS: A nutrient with a list of the value for each month, will need to have \" each month\" at the end of the units. A nutrient that represents the value for every month must have a \" per month\" at the end of the units. A nutrient with a single value all summed up over all time periods must not contain any \" each month\" or \" per month\" in the units. example_food=Food(10,3,1) (defaults to billion kcals, thousand tons monthly fat, thousand tons monthly protein) print(example_food): protein: 1 thousand tons >>> kcals_units = 'ratio minimum global needs per year', >>> fat_units = 'ratio minimum global needs per year', >>> protein_units = 'ratio minimum global needs per year', >>> ) >>> print(example_food): protein: 1 ratio minimum global needs per year (in order to get a min nutrient, you need to make sure the units are all the same) (in reality, you would want to divide the values by the actual global needs above) print(example_food.get_min_nutrient()) ('protein', 1) >>> example_food_monthly.set_units( >>> kcals_units = 'ratio minimum global needs per month', >>> fat_units = 'ratio minimum global needs per month', >>> protein_units = 'ratio minimum global needs per month', >>> ) print(example_food_monthly) protein: 0.08333333333333333 ratio minimum global needs per month >>> example_food_all_months = Food( >>> [example_food_monthly.kcals] * NMONTHS, >>> [example_food_monthly.fat] * NMONTHS, >>> [example_food_monthly.protein] * NMONTHS, >>> ) >>> example_food_all_months.set_units( >>> kcals_units = 'ratio minimum global needs each month', >>> fat_units = 'ratio minimum global needs each month', >>> protein_units = 'ratio minimum global needs each month', >>> ) >>> print(example_food_all_months) ratio minimum global needs each month Methods:","title":"Food"},{"location":"modules/src/food_system/food/#validate_if_list","text":"source .validate_if_list() Runs all the checks to make sure the list is properly set up","title":".validate_if_list"},{"location":"modules/src/food_system/food/#make_sure_not_a_list","text":"source .make_sure_not_a_list() throw an error if any of the food nutrients are a list","title":".make_sure_not_a_list"},{"location":"modules/src/food_system/food/#make_sure_is_a_list","text":"source .make_sure_is_a_list() throw an error if any of the food nutrients is not a list, then validate list properties","title":".make_sure_is_a_list"},{"location":"modules/src/food_system/food/#ensure_other_list_zero_if_this_is_zero","text":"source .ensure_other_list_zero_if_this_is_zero( other_list ) Get the value of the elements where the passed in list is zero, otherwise returned elements are zero.","title":".ensure_other_list_zero_if_this_is_zero"},{"location":"modules/src/food_system/food/#make_sure_fat_protein_zero_if_kcals_is_zero","text":"source .make_sure_fat_protein_zero_if_kcals_is_zero() Get the value of the elements where the passed in list is zero, otherwise returned elements are zero.","title":".make_sure_fat_protein_zero_if_kcals_is_zero"},{"location":"modules/src/food_system/food/#make_sure_not_nan","text":"source .make_sure_not_nan() Make sure that the food is not a nan number, or fail the assertion","title":".make_sure_not_nan"},{"location":"modules/src/food_system/food/#plot","text":"source .plot( title = 'genericfoodobjectovertime' ) Use the plotter to plot this food's properties.","title":".plot"},{"location":"modules/src/food_system/food/#is_list_monthly","text":"source .is_list_monthly() return whether this is a list","title":".is_list_monthly"},{"location":"modules/src/food_system/food/#is_never_negative","text":"source .is_never_negative() Checks wether the food's macronutrients are never negative.","title":".is_never_negative"},{"location":"modules/src/food_system/food/#all_greater_than","text":"source .all_greater_than( other ) Returns True if the food's macronutrients are greater than the other food's.","title":".all_greater_than"},{"location":"modules/src/food_system/food/#all_less_than","text":"source .all_less_than( other ) Returns True if the food's macronutrients are greater than the other food's.","title":".all_less_than"},{"location":"modules/src/food_system/food/#any_greater_than","text":"source .any_greater_than( other ) Returns True if the food's macronutrients are greater than the other food's.","title":".any_greater_than"},{"location":"modules/src/food_system/food/#any_less_than","text":"source .any_less_than( other ) Returns True if the food's macronutrients are less than the other food's.","title":".any_less_than"},{"location":"modules/src/food_system/food/#all_greater_than_or_equal_to","text":"source .all_greater_than_or_equal_to( other ) Returns True if the food's macronutrients are greater than or equal to the other food's.","title":".all_greater_than_or_equal_to"},{"location":"modules/src/food_system/food/#all_less_than_or_equal_to","text":"source .all_less_than_or_equal_to( other ) Returns :True if the food's macronutrients are less than or equal to the other food's. cases: this is food, other is food this is food, other is food list this is food list, other is food this is food list, other is food list","title":".all_less_than_or_equal_to"},{"location":"modules/src/food_system/food/#any_greater_than_or_equal_to","text":"source .any_greater_than_or_equal_to( other ) Returns True if the food's macronutrients are greater than or equal to the other food's.","title":".any_greater_than_or_equal_to"},{"location":"modules/src/food_system/food/#any_less_than_or_equal_to","text":"source .any_less_than_or_equal_to( other ) Returns True if the food's macronutrients are less than or equal to the other food's.","title":".any_less_than_or_equal_to"},{"location":"modules/src/food_system/food/#all_equals_zero","text":"source .all_equals_zero() Returns True if the food's macronutrients are equal to zero.","title":".all_equals_zero"},{"location":"modules/src/food_system/food/#any_equals_zero","text":"source .any_equals_zero() Returns True if the food's macronutrients are equal to zero.","title":".any_equals_zero"},{"location":"modules/src/food_system/food/#all_greater_than_zero","text":"source .all_greater_than_zero() Returns True if the food's macronutrients are greater than zero.","title":".all_greater_than_zero"},{"location":"modules/src/food_system/food/#any_greater_than_zero","text":"source .any_greater_than_zero() Returns True if any of the food's macronutrients are greater than zero.","title":".any_greater_than_zero"},{"location":"modules/src/food_system/food/#all_greater_than_or_equal_to_zero","text":"source .all_greater_than_or_equal_to_zero() Returns True if the food's macronutrients are greater than or equal to zero.","title":".all_greater_than_or_equal_to_zero"},{"location":"modules/src/food_system/food/#as_numpy_array","text":"source .as_numpy_array() Returns the nutrients as an ordered numpy_array.","title":".as_numpy_array"},{"location":"modules/src/food_system/food/#get_min_nutrient","text":"source .get_min_nutrient() Returns the minimum nutrient of the food. Can return the minimum of any month of any nutrient if a food list, or just `the minimum of any nutrient if a food Only works when the units is identical for the different nutrients Returns (minimum nutrient name, minimum nutrient value)","title":".get_min_nutrient"},{"location":"modules/src/food_system/food/#get_max_nutrient","text":"source .get_max_nutrient() Returns the maximum nutrient of the food. NOTE: only works on single valued instances of nutrients, not arrays. Returns (maximum nutrient name, maximum nutrient value)","title":".get_max_nutrient"},{"location":"modules/src/food_system/food/#get_nutrients_sum","text":"source .get_nutrients_sum() Sum up the nutrients in all the months, then alter the units to remove \"each month\"","title":".get_nutrients_sum"},{"location":"modules/src/food_system/food/#get_running_total_nutrients_sum","text":"source .get_running_total_nutrients_sum() Running sum of the nutrients in all the months, don't alter units","title":".get_running_total_nutrients_sum"},{"location":"modules/src/food_system/food/#get_amount_used_other_food","text":"source .get_amount_used_other_food( other_fat_ratio, other_protein_ratio ) Running sum of the amount used of the other food each month. Function used to determine the amount of stored food or outdoor growing that is used by biofuels and feed this is determined by taking the max amount used of the three nutrients, which is satisfied by a certain number of units of the other food. Surplus of the nutrients used is not used at all in the calculation.","title":".get_amount_used_other_food"},{"location":"modules/src/food_system/food/#get_consumed_amount","text":"source .get_consumed_amount( demand_to_be_met, used_nutrient_ratio ) returns the amount used of the demand_to_be_met a food with a given used_nutrient_ratio. The maximum nutrient used is used to determine the amount of the consumed food will be used.","title":".get_consumed_amount"},{"location":"modules/src/food_system/food/#get_first_month","text":"source .get_first_month() Just get the first month's nutrient values and convert the units from \"each\" to \"per\"","title":".get_first_month"},{"location":"modules/src/food_system/food/#get_month","text":"source .get_month( index ) Get the i month's nutrient values, and convert the units from \"each\" to \"per\"","title":".get_month"},{"location":"modules/src/food_system/food/#get_min_all_months","text":"source .get_min_all_months() create a food with the minimum of every month as a total nutrient","title":".get_min_all_months"},{"location":"modules/src/food_system/food/#get_max_all_months","text":"source .get_max_all_months() create a food with the maximum of every month as a total nutrient","title":".get_max_all_months"},{"location":"modules/src/food_system/food/#negative_values_to_zero","text":"source .negative_values_to_zero() Replace negative values with zero for each month for all nutrients. Also tests that the function worked. Returns the relevant food object with negative values replaced","title":".negative_values_to_zero"},{"location":"modules/src/food_system/food/#get_rounded_to_decimal","text":"source .get_rounded_to_decimal( decimals ) Round to the nearest decimal place to give you an idea how this works: np.round([1,-1,.1,-.1,0.01,-0.01],decimals=1) array([ 1. , -1. , 0.1, -0.1, 0. , -0. ]) NOTE: only implemented for lists at the moment","title":".get_rounded_to_decimal"},{"location":"modules/src/food_system/food/#replace_if_list_with_zeros_is_zero","text":"source .replace_if_list_with_zeros_is_zero( list_with_zeros, replacement ) replace with the replacement if list_with_zeros is zero arguments: list with zeros ( food list ): a list that has zeros in it the elements returns: itself, but with places list_with_zeros zero replaced with replacement","title":".replace_if_list_with_zeros_is_zero"},{"location":"modules/src/food_system/food/#set_to_zero_after_month","text":"source .set_to_zero_after_month( month ) set all values after the month to zero","title":".set_to_zero_after_month"},{"location":"modules/src/food_system/greenhouses/","text":"Greenhouses source Greenhouses( constants_for_params ) Methods: .assign_productivity_reduction_from_climate_impact source .assign_productivity_reduction_from_climate_impact( months_cycle, all_months_reductions, exponent, CROP_WASTE ) .get_greenhouse_area source .get_greenhouse_area( constants_for_params, outdoor_crops ) .get_greenhouse_yield_per_ha source .get_greenhouse_yield_per_ha( constants_for_params, outdoor_crops )","title":"Greenhouses"},{"location":"modules/src/food_system/greenhouses/#_1","text":"","title":""},{"location":"modules/src/food_system/greenhouses/#greenhouses","text":"source Greenhouses( constants_for_params ) Methods:","title":"Greenhouses"},{"location":"modules/src/food_system/greenhouses/#assign_productivity_reduction_from_climate_impact","text":"source .assign_productivity_reduction_from_climate_impact( months_cycle, all_months_reductions, exponent, CROP_WASTE )","title":".assign_productivity_reduction_from_climate_impact"},{"location":"modules/src/food_system/greenhouses/#get_greenhouse_area","text":"source .get_greenhouse_area( constants_for_params, outdoor_crops )","title":".get_greenhouse_area"},{"location":"modules/src/food_system/greenhouses/#get_greenhouse_yield_per_ha","text":"source .get_greenhouse_yield_per_ha( constants_for_params, outdoor_crops )","title":".get_greenhouse_yield_per_ha"},{"location":"modules/src/food_system/meat_and_dairy/","text":"MeatAndDairy source MeatAndDairy( constants_for_params ) Methods: .calculate_meat_nutrition source .calculate_meat_nutrition() .get_meat_nutrition source .get_meat_nutrition() .calculate_meat_limits source .calculate_meat_limits( MAX_RATIO_CULLED_SLAUGHTER_TO_BASELINE, culled_meat_initial ) calculate the baseline levels of meat production, indicating slaughter capacity There's no limit on the actual amount eaten, but the amount produced and then preserved after culling is assumed to be some multiple of current slaughter capacity This just means that the limit each month on the amount that could be eaten is the sum of the max estimated slaughter capacity each month .calculate_continued_ratios_meat_dairy_grazing source .calculate_continued_ratios_meat_dairy_grazing( constants_for_params ) .calculate_continued_ratios_meat_dairy_grain source .calculate_continued_ratios_meat_dairy_grain( fed_to_animals_prewaste, outdoor_crops ) .calculate_meat_and_dairy_from_grain source .calculate_meat_and_dairy_from_grain( fed_to_animals_prewaste ) .calculate_meat_milk_from_human_inedible_feed source .calculate_meat_milk_from_human_inedible_feed( constants_for_params ) .get_milk_from_human_edible_feed source .get_milk_from_human_edible_feed( constants_for_params ) .get_meat_from_human_edible_feed source .get_meat_from_human_edible_feed() .get_grazing_milk_produced_postwaste source .get_grazing_milk_produced_postwaste( grazing_milk_produced_prewaste ) .get_cattle_grazing_maintained source .get_cattle_grazing_maintained() .get_max_slaughter_monthly source .get_max_slaughter_monthly( small_animals_culled, medium_animals_culled, large_animals_culled ) Get the maximum number of animals that can be culled in a month and return the resulting array for max total calories consumed that month. .calculate_culled_meat source .calculate_culled_meat( init_small_animals_culled, init_medium_animals_culled, init_large_animals_culled ) .get_culled_meat_post_waste source .get_culled_meat_post_waste( constants_for_params ) .calculate_animals_culled source .calculate_animals_culled( constants_for_params )","title":"Meat and dairy"},{"location":"modules/src/food_system/meat_and_dairy/#_1","text":"","title":""},{"location":"modules/src/food_system/meat_and_dairy/#meatanddairy","text":"source MeatAndDairy( constants_for_params ) Methods:","title":"MeatAndDairy"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_meat_nutrition","text":"source .calculate_meat_nutrition()","title":".calculate_meat_nutrition"},{"location":"modules/src/food_system/meat_and_dairy/#get_meat_nutrition","text":"source .get_meat_nutrition()","title":".get_meat_nutrition"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_meat_limits","text":"source .calculate_meat_limits( MAX_RATIO_CULLED_SLAUGHTER_TO_BASELINE, culled_meat_initial ) calculate the baseline levels of meat production, indicating slaughter capacity There's no limit on the actual amount eaten, but the amount produced and then preserved after culling is assumed to be some multiple of current slaughter capacity This just means that the limit each month on the amount that could be eaten is the sum of the max estimated slaughter capacity each month","title":".calculate_meat_limits"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_continued_ratios_meat_dairy_grazing","text":"source .calculate_continued_ratios_meat_dairy_grazing( constants_for_params )","title":".calculate_continued_ratios_meat_dairy_grazing"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_continued_ratios_meat_dairy_grain","text":"source .calculate_continued_ratios_meat_dairy_grain( fed_to_animals_prewaste, outdoor_crops )","title":".calculate_continued_ratios_meat_dairy_grain"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_meat_and_dairy_from_grain","text":"source .calculate_meat_and_dairy_from_grain( fed_to_animals_prewaste )","title":".calculate_meat_and_dairy_from_grain"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_meat_milk_from_human_inedible_feed","text":"source .calculate_meat_milk_from_human_inedible_feed( constants_for_params )","title":".calculate_meat_milk_from_human_inedible_feed"},{"location":"modules/src/food_system/meat_and_dairy/#get_milk_from_human_edible_feed","text":"source .get_milk_from_human_edible_feed( constants_for_params )","title":".get_milk_from_human_edible_feed"},{"location":"modules/src/food_system/meat_and_dairy/#get_meat_from_human_edible_feed","text":"source .get_meat_from_human_edible_feed()","title":".get_meat_from_human_edible_feed"},{"location":"modules/src/food_system/meat_and_dairy/#get_grazing_milk_produced_postwaste","text":"source .get_grazing_milk_produced_postwaste( grazing_milk_produced_prewaste )","title":".get_grazing_milk_produced_postwaste"},{"location":"modules/src/food_system/meat_and_dairy/#get_cattle_grazing_maintained","text":"source .get_cattle_grazing_maintained()","title":".get_cattle_grazing_maintained"},{"location":"modules/src/food_system/meat_and_dairy/#get_max_slaughter_monthly","text":"source .get_max_slaughter_monthly( small_animals_culled, medium_animals_culled, large_animals_culled ) Get the maximum number of animals that can be culled in a month and return the resulting array for max total calories consumed that month.","title":".get_max_slaughter_monthly"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_culled_meat","text":"source .calculate_culled_meat( init_small_animals_culled, init_medium_animals_culled, init_large_animals_culled )","title":".calculate_culled_meat"},{"location":"modules/src/food_system/meat_and_dairy/#get_culled_meat_post_waste","text":"source .get_culled_meat_post_waste( constants_for_params )","title":".get_culled_meat_post_waste"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_animals_culled","text":"source .calculate_animals_culled( constants_for_params )","title":".calculate_animals_culled"},{"location":"modules/src/food_system/methane_scp/","text":"MethaneSCP source MethaneSCP( constants_for_params ) Methods: .calculate_monthly_scp_production source .calculate_monthly_scp_production( constants_for_params ) .get_scp_production source .get_scp_production()","title":"Methane scp"},{"location":"modules/src/food_system/methane_scp/#_1","text":"","title":""},{"location":"modules/src/food_system/methane_scp/#methanescp","text":"source MethaneSCP( constants_for_params ) Methods:","title":"MethaneSCP"},{"location":"modules/src/food_system/methane_scp/#calculate_monthly_scp_production","text":"source .calculate_monthly_scp_production( constants_for_params )","title":".calculate_monthly_scp_production"},{"location":"modules/src/food_system/methane_scp/#get_scp_production","text":"source .get_scp_production()","title":".get_scp_production"},{"location":"modules/src/food_system/outdoor_crops/","text":"OutdoorCrops source OutdoorCrops( constants_for_params ) Methods: .calculate_rotation_ratios source .calculate_rotation_ratios( constants_for_params ) .calculate_monthly_production source .calculate_monthly_production( constants_for_params ) .assign_reduction_from_climate_impact source .assign_reduction_from_climate_impact( constants_for_params ) .set_crop_production_minus_greenhouse_area source .set_crop_production_minus_greenhouse_area( constants_for_params, greenhouse_fraction_area )","title":"Outdoor crops"},{"location":"modules/src/food_system/outdoor_crops/#_1","text":"","title":""},{"location":"modules/src/food_system/outdoor_crops/#outdoorcrops","text":"source OutdoorCrops( constants_for_params ) Methods:","title":"OutdoorCrops"},{"location":"modules/src/food_system/outdoor_crops/#calculate_rotation_ratios","text":"source .calculate_rotation_ratios( constants_for_params )","title":".calculate_rotation_ratios"},{"location":"modules/src/food_system/outdoor_crops/#calculate_monthly_production","text":"source .calculate_monthly_production( constants_for_params )","title":".calculate_monthly_production"},{"location":"modules/src/food_system/outdoor_crops/#assign_reduction_from_climate_impact","text":"source .assign_reduction_from_climate_impact( constants_for_params )","title":".assign_reduction_from_climate_impact"},{"location":"modules/src/food_system/outdoor_crops/#set_crop_production_minus_greenhouse_area","text":"source .set_crop_production_minus_greenhouse_area( constants_for_params, greenhouse_fraction_area )","title":".set_crop_production_minus_greenhouse_area"},{"location":"modules/src/food_system/seafood/","text":"Seafood source Seafood( constants_for_params ) Methods: .get_seafood_production source .get_seafood_production( constants_for_params )","title":"Seafood"},{"location":"modules/src/food_system/seafood/#_1","text":"","title":""},{"location":"modules/src/food_system/seafood/#seafood","text":"source Seafood( constants_for_params ) Methods:","title":"Seafood"},{"location":"modules/src/food_system/seafood/#get_seafood_production","text":"source .get_seafood_production( constants_for_params )","title":".get_seafood_production"},{"location":"modules/src/food_system/seaweed/","text":"Seaweed source Seaweed( constants_for_params ) Methods: .get_built_area source .get_built_area( constants_for_params )","title":"Seaweed"},{"location":"modules/src/food_system/seaweed/#_1","text":"","title":""},{"location":"modules/src/food_system/seaweed/#seaweed","text":"source Seaweed( constants_for_params ) Methods:","title":"Seaweed"},{"location":"modules/src/food_system/seaweed/#get_built_area","text":"source .get_built_area( constants_for_params )","title":".get_built_area"},{"location":"modules/src/food_system/stored_food/","text":"StoredFood source StoredFood( constants_for_params, outdoor_crops ) Methods: .calculate_stored_food_to_use source .calculate_stored_food_to_use( starting_month ) Calculates and returns total stored food available to use at start of simulation. While a baseline scenario will simply use the typical amount of stocks to keep the buffer at a typical usage, other more extreme scenarios should be expected to use a higher percentage of all stored food, eating into the typical buffer. Arguments starting_month (int) : the month the simulation starts on. 1=JAN, 2=FEB, ..., 12=DEC. (NOT TO BE CONFUSED WITH THE INDEX) Returns float : the total stored food in millions of tons dry caloric Assumptions: buffer_ratio (float): the percent of the typical buffered stored food to keep at the end of the simulation. The stocks listed are tabulated at the end of the month. The minimum of any beginning month is a reasonable proxy for the very lowest levels stocks reach. Note the optimizer will run through the stocks for the duration of each month. So, even starting at August (the minimum month), you would want to use the difference in stocks at the end of the previous month until the end of August to determine the stocks. .set_to_zero source .set_to_zero() Initializes the stored food to zero.","title":"Stored food"},{"location":"modules/src/food_system/stored_food/#_1","text":"","title":""},{"location":"modules/src/food_system/stored_food/#storedfood","text":"source StoredFood( constants_for_params, outdoor_crops ) Methods:","title":"StoredFood"},{"location":"modules/src/food_system/stored_food/#calculate_stored_food_to_use","text":"source .calculate_stored_food_to_use( starting_month ) Calculates and returns total stored food available to use at start of simulation. While a baseline scenario will simply use the typical amount of stocks to keep the buffer at a typical usage, other more extreme scenarios should be expected to use a higher percentage of all stored food, eating into the typical buffer. Arguments starting_month (int) : the month the simulation starts on. 1=JAN, 2=FEB, ..., 12=DEC. (NOT TO BE CONFUSED WITH THE INDEX) Returns float : the total stored food in millions of tons dry caloric Assumptions: buffer_ratio (float): the percent of the typical buffered stored food to keep at the end of the simulation. The stocks listed are tabulated at the end of the month. The minimum of any beginning month is a reasonable proxy for the very lowest levels stocks reach. Note the optimizer will run through the stocks for the duration of each month. So, even starting at August (the minimum month), you would want to use the difference in stocks at the end of the previous month until the end of August to determine the stocks.","title":".calculate_stored_food_to_use"},{"location":"modules/src/food_system/stored_food/#set_to_zero","text":"source .set_to_zero() Initializes the stored food to zero.","title":".set_to_zero"},{"location":"modules/src/food_system/unit_conversions/","text":"UnitConversions source This class is used to convert units of nutrients Methods: .set_nutrition_requirements source .set_nutrition_requirements( kcals_daily, fat_daily, protein_daily, include_fat, include_protein, population ) Returns the macronutrients of the food. This is a bit of a confusing function. It is normally run from a UnitConversions class in the Food child class that Food class contains one UnitConversions object which has had its nutrients assigned. Then, because this is the parent class, all the functions are inherited. So, running get_conversions() (the class function to get the conversions object in the child food class), this will obtain all the conversion data instantiated through the Food class. .get_units_from_list_to_total source .get_units_from_list_to_total() gets the units so that they reflect that of a single month .set_units_from_list_to_total source .set_units_from_list_to_total() sets the units so that they reflect that of a single month .get_units_from_list_to_element source .get_units_from_list_to_element() gets the units so that they reflect that of a single month .set_units_from_list_to_element source .set_units_from_list_to_element() sets the units so that they reflect that of a single month .get_units_from_element_to_list source .get_units_from_element_to_list() gets the units so that they reflect that of a list of months .set_units_from_element_to_list source .set_units_from_element_to_list() sets the units so that they reflect that of a list of months .get_units source .get_units() update and return the unit values as a 3 element array .set_units source .set_units( kcals_units, fat_units, protein_units ) Sets the units of the food (for example, billion_kcals,thousand_tons, dry caloric tons, kcals/capita/day, or percent of global food supply). default units are billion kcals, thousand tons fat, thousand tons protein For convenience and as a memory tool, set the units, and make sure that whenever an operation on a different food is used, the units are compatible .print_units source .print_units() Prints the units of the nutrients .is_a_ratio source .is_a_ratio() Returns if units are all \"ratio\" type .is_units_percent source .is_units_percent() Returns if units are all \"percent\" type .in_units_billions_fed source .in_units_billions_fed() If the existing units are understood by this function, it tries to convert the values and units to billions of people fed. .in_units_percent_fed source .in_units_percent_fed() If the existing units are understood by this function, it tries to convert the values and units to percent of people fed. .in_units_bil_kcals_thou_tons_thou_tons_per_month source .in_units_bil_kcals_thou_tons_thou_tons_per_month() If the existing units are understood by this function, it tries to convert the values and units to percent of people fed. .in_units_kcals_equivalent source .in_units_kcals_equivalent() If the existing units are understood by this function, it tries to convert the values and units to effective kcals per capita per day for each nutrient. .in_units_kcals_grams_grams_per_capita_from_ratio source .in_units_kcals_grams_grams_per_capita_from_ratio( kcal_ratio, fat_ratio, protein_ratio ) If the existing units are understood by this function, it tries to convert the values and units to kcals per person per day, grams per pseron per day, kcals per person per day. arguments: kcal ratio (float): kcal per kg of the food being converted fat ratio (float): grams per kcal of the food being converted kcal ratio (float): grams per kcal of the food being converted .in_units_kcals_grams_grams_per_capita source .in_units_kcals_grams_grams_per_capita() If the existing units are understood by this function, it tries to convert the values and units to kcals per person per day, grams per pseron per day, kcals per person per day.","title":"Unit conversions"},{"location":"modules/src/food_system/unit_conversions/#_1","text":"","title":""},{"location":"modules/src/food_system/unit_conversions/#unitconversions","text":"source This class is used to convert units of nutrients Methods:","title":"UnitConversions"},{"location":"modules/src/food_system/unit_conversions/#set_nutrition_requirements","text":"source .set_nutrition_requirements( kcals_daily, fat_daily, protein_daily, include_fat, include_protein, population ) Returns the macronutrients of the food. This is a bit of a confusing function. It is normally run from a UnitConversions class in the Food child class that Food class contains one UnitConversions object which has had its nutrients assigned. Then, because this is the parent class, all the functions are inherited. So, running get_conversions() (the class function to get the conversions object in the child food class), this will obtain all the conversion data instantiated through the Food class.","title":".set_nutrition_requirements"},{"location":"modules/src/food_system/unit_conversions/#get_units_from_list_to_total","text":"source .get_units_from_list_to_total() gets the units so that they reflect that of a single month","title":".get_units_from_list_to_total"},{"location":"modules/src/food_system/unit_conversions/#set_units_from_list_to_total","text":"source .set_units_from_list_to_total() sets the units so that they reflect that of a single month","title":".set_units_from_list_to_total"},{"location":"modules/src/food_system/unit_conversions/#get_units_from_list_to_element","text":"source .get_units_from_list_to_element() gets the units so that they reflect that of a single month","title":".get_units_from_list_to_element"},{"location":"modules/src/food_system/unit_conversions/#set_units_from_list_to_element","text":"source .set_units_from_list_to_element() sets the units so that they reflect that of a single month","title":".set_units_from_list_to_element"},{"location":"modules/src/food_system/unit_conversions/#get_units_from_element_to_list","text":"source .get_units_from_element_to_list() gets the units so that they reflect that of a list of months","title":".get_units_from_element_to_list"},{"location":"modules/src/food_system/unit_conversions/#set_units_from_element_to_list","text":"source .set_units_from_element_to_list() sets the units so that they reflect that of a list of months","title":".set_units_from_element_to_list"},{"location":"modules/src/food_system/unit_conversions/#get_units","text":"source .get_units() update and return the unit values as a 3 element array","title":".get_units"},{"location":"modules/src/food_system/unit_conversions/#set_units","text":"source .set_units( kcals_units, fat_units, protein_units ) Sets the units of the food (for example, billion_kcals,thousand_tons, dry caloric tons, kcals/capita/day, or percent of global food supply). default units are billion kcals, thousand tons fat, thousand tons protein For convenience and as a memory tool, set the units, and make sure that whenever an operation on a different food is used, the units are compatible","title":".set_units"},{"location":"modules/src/food_system/unit_conversions/#print_units","text":"source .print_units() Prints the units of the nutrients","title":".print_units"},{"location":"modules/src/food_system/unit_conversions/#is_a_ratio","text":"source .is_a_ratio() Returns if units are all \"ratio\" type","title":".is_a_ratio"},{"location":"modules/src/food_system/unit_conversions/#is_units_percent","text":"source .is_units_percent() Returns if units are all \"percent\" type","title":".is_units_percent"},{"location":"modules/src/food_system/unit_conversions/#in_units_billions_fed","text":"source .in_units_billions_fed() If the existing units are understood by this function, it tries to convert the values and units to billions of people fed.","title":".in_units_billions_fed"},{"location":"modules/src/food_system/unit_conversions/#in_units_percent_fed","text":"source .in_units_percent_fed() If the existing units are understood by this function, it tries to convert the values and units to percent of people fed.","title":".in_units_percent_fed"},{"location":"modules/src/food_system/unit_conversions/#in_units_bil_kcals_thou_tons_thou_tons_per_month","text":"source .in_units_bil_kcals_thou_tons_thou_tons_per_month() If the existing units are understood by this function, it tries to convert the values and units to percent of people fed.","title":".in_units_bil_kcals_thou_tons_thou_tons_per_month"},{"location":"modules/src/food_system/unit_conversions/#in_units_kcals_equivalent","text":"source .in_units_kcals_equivalent() If the existing units are understood by this function, it tries to convert the values and units to effective kcals per capita per day for each nutrient.","title":".in_units_kcals_equivalent"},{"location":"modules/src/food_system/unit_conversions/#in_units_kcals_grams_grams_per_capita_from_ratio","text":"source .in_units_kcals_grams_grams_per_capita_from_ratio( kcal_ratio, fat_ratio, protein_ratio ) If the existing units are understood by this function, it tries to convert the values and units to kcals per person per day, grams per pseron per day, kcals per person per day. arguments: kcal ratio (float): kcal per kg of the food being converted fat ratio (float): grams per kcal of the food being converted kcal ratio (float): grams per kcal of the food being converted","title":".in_units_kcals_grams_grams_per_capita_from_ratio"},{"location":"modules/src/food_system/unit_conversions/#in_units_kcals_grams_grams_per_capita","text":"source .in_units_kcals_grams_grams_per_capita() If the existing units are understood by this function, it tries to convert the values and units to kcals per person per day, grams per pseron per day, kcals per person per day.","title":".in_units_kcals_grams_grams_per_capita"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/","text":"CropMacros source Methods: .import_nutrients_and_products source .import_nutrients_and_products() .get_kcals_matching source .get_kcals_matching( match_strings, products ) Returns the sum of kcals, fat, and protein for the products that the passed in name as a substring of the product name string. .get_nutrients source .get_nutrients( products ) Returns the sum of kcals, fat, and protein for the products passed in. .get_macros_csv source .get_macros_csv() get the stack of macronutrients that correspond to each countryd .clean_up_macros_csv source .clean_up_macros_csv( macros_csv )","title":"Create crop macros csv"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#_1","text":"","title":""},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#cropmacros","text":"source Methods:","title":"CropMacros"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#import_nutrients_and_products","text":"source .import_nutrients_and_products()","title":".import_nutrients_and_products"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#get_kcals_matching","text":"source .get_kcals_matching( match_strings, products ) Returns the sum of kcals, fat, and protein for the products that the passed in name as a substring of the product name string.","title":".get_kcals_matching"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#get_nutrients","text":"source .get_nutrients( products ) Returns the sum of kcals, fat, and protein for the products passed in.","title":".get_nutrients"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#get_macros_csv","text":"source .get_macros_csv() get the stack of macronutrients that correspond to each countryd","title":".get_macros_csv"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#clean_up_macros_csv","text":"source .clean_up_macros_csv( macros_csv )","title":".clean_up_macros_csv"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/","text":"get_crop_ratios_this_country source .get_crop_ratios_this_country( country_id, crop_macros ) get the kcal ratios production for wheat, rice, soy, spring wheat each country We assume some similar crops will count towards these ratios, in order to get a better approximation of how the reduction will affect the country. get_overall_reduction source .get_overall_reduction( country_data, country_id, crop_macros ) determine the total reduction in production using the relative reduction in corn, rice, soy, and spring wheat also separately assigns the grass reduction appropriately calculate_reductions source .calculate_reductions( country_data, country_id, crop_macros ) calculate the crop reduction percentage for each year and aggregate as array clean_up_nw_csv source .clean_up_nw_csv( nw_csv, nw_csv_cols ) get_all_crops_correct_countries source .get_all_crops_correct_countries( input_table ) get the columns with all the reductions for every crop, with the countries properly aggregated (eu27+uk combined) and Taiwan reductions equal to China's (Rutgers dataset doesn't include Taiwan as a distinct entity)","title":"Create nuclear winter csv"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#_1","text":"","title":""},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#get_crop_ratios_this_country","text":"source .get_crop_ratios_this_country( country_id, crop_macros ) get the kcal ratios production for wheat, rice, soy, spring wheat each country We assume some similar crops will count towards these ratios, in order to get a better approximation of how the reduction will affect the country.","title":"get_crop_ratios_this_country"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#get_overall_reduction","text":"source .get_overall_reduction( country_data, country_id, crop_macros ) determine the total reduction in production using the relative reduction in corn, rice, soy, and spring wheat also separately assigns the grass reduction appropriately","title":"get_overall_reduction"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#calculate_reductions","text":"source .calculate_reductions( country_data, country_id, crop_macros ) calculate the crop reduction percentage for each year and aggregate as array","title":"calculate_reductions"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#clean_up_nw_csv","text":"source .clean_up_nw_csv( nw_csv, nw_csv_cols )","title":"clean_up_nw_csv"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#get_all_crops_correct_countries","text":"source .get_all_crops_correct_countries( input_table ) get the columns with all the reductions for every crop, with the countries properly aggregated (eu27+uk combined) and Taiwan reductions equal to China's (Rutgers dataset doesn't include Taiwan as a distinct entity)","title":"get_all_crops_correct_countries"},{"location":"modules/src/optimizer/extract_results/","text":"Extractor source Extractor( constants ) Methods: .extract_results source .extract_results( model, variables, single_valued_constants, multi_valued_constants ) .to_monthly_list source .to_monthly_list( variables, conversion ) .to_monthly_list_outdoor_crops_kcals source .to_monthly_list_outdoor_crops_kcals( crops_food_eaten_no_relocation, crops_food_eaten_relocated, crops_kcals_produced, conversion ) This function is actually guessing at the internal operations of the optimizer when it creates an optimized plot. It takes the total outdoor crop production and limits it by the actual amount eaten by people reported by the optimizer. If more is eaten than produced, this difference is attributed to the eating of stored up crops. We know it can't be stored food from before the simulation because the variable only considers the outdoor_crops variable, not the stored_food variable The amount of expected crops produced that month that were eaten is assigned to the \"immediate\" list. The amount eaten beyond the production that month is assigned to the new stored list. NOTE: the validator will check that the sum of immediate and new stored is the same as the total amount eaten. .extract_greenhouse_results source .extract_greenhouse_results( greenhouse_kcals_per_ha, greenhouse_fat_per_ha, greenhouse_protein_per_ha, greenhouse_area ) .extract_fish_results source .extract_fish_results( production_kcals_fish_per_month, production_fat_fish_per_month, production_protein_fish_per_month ) .extract_outdoor_crops_results source .extract_outdoor_crops_results( crops_food_eaten_no_relocation, crops_food_eaten_relocated, outdoor_crops ) .set_crop_produced_monthly source .set_crop_produced_monthly( outdoor_crops ) get the crop produced monthly, rather than the amount eaten incorporates relocations .extract_cell_sugar_results source .extract_cell_sugar_results( production_kcals_cell_sugar_per_month ) .extract_SCP_results source .extract_SCP_results( production_kcals_scp_per_month, production_fat_scp_per_month, production_protein_scp_per_month ) .extract_meat_milk_results source .extract_meat_milk_results( culled_meat_eaten, grazing_milk_kcals, grazing_milk_fat, grazing_milk_protein, cattle_grazing_maintained_kcals, cattle_grazing_maintained_fat, cattle_grazing_maintained_protein, grain_fed_meat_kcals, grain_fed_meat_fat, grain_fed_meat_protein, grain_fed_milk_kcals, grain_fed_milk_fat, grain_fed_milk_protein ) .extract_stored_food_results source .extract_stored_food_results( stored_food_eaten ) Extracts results from stored food eaten. .extract_seaweed_results source .extract_seaweed_results( seaweed_wet_on_farm, used_area, built_area, seaweed_food_produced ) .get_objective_optimization_results source .get_objective_optimization_results( model )","title":"Extract results"},{"location":"modules/src/optimizer/extract_results/#_1","text":"","title":""},{"location":"modules/src/optimizer/extract_results/#extractor","text":"source Extractor( constants ) Methods:","title":"Extractor"},{"location":"modules/src/optimizer/extract_results/#extract_results","text":"source .extract_results( model, variables, single_valued_constants, multi_valued_constants )","title":".extract_results"},{"location":"modules/src/optimizer/extract_results/#to_monthly_list","text":"source .to_monthly_list( variables, conversion )","title":".to_monthly_list"},{"location":"modules/src/optimizer/extract_results/#to_monthly_list_outdoor_crops_kcals","text":"source .to_monthly_list_outdoor_crops_kcals( crops_food_eaten_no_relocation, crops_food_eaten_relocated, crops_kcals_produced, conversion ) This function is actually guessing at the internal operations of the optimizer when it creates an optimized plot. It takes the total outdoor crop production and limits it by the actual amount eaten by people reported by the optimizer. If more is eaten than produced, this difference is attributed to the eating of stored up crops. We know it can't be stored food from before the simulation because the variable only considers the outdoor_crops variable, not the stored_food variable The amount of expected crops produced that month that were eaten is assigned to the \"immediate\" list. The amount eaten beyond the production that month is assigned to the new stored list. NOTE: the validator will check that the sum of immediate and new stored is the same as the total amount eaten.","title":".to_monthly_list_outdoor_crops_kcals"},{"location":"modules/src/optimizer/extract_results/#extract_greenhouse_results","text":"source .extract_greenhouse_results( greenhouse_kcals_per_ha, greenhouse_fat_per_ha, greenhouse_protein_per_ha, greenhouse_area )","title":".extract_greenhouse_results"},{"location":"modules/src/optimizer/extract_results/#extract_fish_results","text":"source .extract_fish_results( production_kcals_fish_per_month, production_fat_fish_per_month, production_protein_fish_per_month )","title":".extract_fish_results"},{"location":"modules/src/optimizer/extract_results/#extract_outdoor_crops_results","text":"source .extract_outdoor_crops_results( crops_food_eaten_no_relocation, crops_food_eaten_relocated, outdoor_crops )","title":".extract_outdoor_crops_results"},{"location":"modules/src/optimizer/extract_results/#set_crop_produced_monthly","text":"source .set_crop_produced_monthly( outdoor_crops ) get the crop produced monthly, rather than the amount eaten incorporates relocations","title":".set_crop_produced_monthly"},{"location":"modules/src/optimizer/extract_results/#extract_cell_sugar_results","text":"source .extract_cell_sugar_results( production_kcals_cell_sugar_per_month )","title":".extract_cell_sugar_results"},{"location":"modules/src/optimizer/extract_results/#extract_scp_results","text":"source .extract_SCP_results( production_kcals_scp_per_month, production_fat_scp_per_month, production_protein_scp_per_month )","title":".extract_SCP_results"},{"location":"modules/src/optimizer/extract_results/#extract_meat_milk_results","text":"source .extract_meat_milk_results( culled_meat_eaten, grazing_milk_kcals, grazing_milk_fat, grazing_milk_protein, cattle_grazing_maintained_kcals, cattle_grazing_maintained_fat, cattle_grazing_maintained_protein, grain_fed_meat_kcals, grain_fed_meat_fat, grain_fed_meat_protein, grain_fed_milk_kcals, grain_fed_milk_fat, grain_fed_milk_protein )","title":".extract_meat_milk_results"},{"location":"modules/src/optimizer/extract_results/#extract_stored_food_results","text":"source .extract_stored_food_results( stored_food_eaten ) Extracts results from stored food eaten.","title":".extract_stored_food_results"},{"location":"modules/src/optimizer/extract_results/#extract_seaweed_results","text":"source .extract_seaweed_results( seaweed_wet_on_farm, used_area, built_area, seaweed_food_produced )","title":".extract_seaweed_results"},{"location":"modules/src/optimizer/extract_results/#get_objective_optimization_results","text":"source .get_objective_optimization_results( model )","title":".get_objective_optimization_results"},{"location":"modules/src/optimizer/interpret_results/","text":"Interpreter source This class is used to convert between optimization results data and other useful ways of interpreting the results, as a diet, or as a total food supply. Methods: .interpret_results source .interpret_results( extracted_results, multi_valued_constants ) This function takes the raw output of the optimizer food categories and total people fed in list form, and converts the naive people fed which includes negative feed, into a purely list of values, where the negative feed has been subtracted from the sum of outdoor growing and stored food. ANYTHING assigned to \"self\" here is part of a useful result that will either be printed or plotted as a result .assign_percent_fed_from_extractor source .assign_percent_fed_from_extractor( extracted_results ) .assign_kcals_equivalent_from_extractor source .assign_kcals_equivalent_from_extractor( extracted_results ) .set_to_humans_properties_kcals_equivalent source .set_to_humans_properties_kcals_equivalent( extracted_results ) .assign_time_months_middle source .assign_time_months_middle( NMONTHS ) .assign_interpreted_properties source .assign_interpreted_properties( extracted_results ) .get_mean_min_nutrient source .get_mean_min_nutrient() for finding the minimum of any nutrient in any month and then getting the mean people fed in all the months This is useful for assessing what would have happened if stored food were not a constraint on number of people fed returns: the mean people fed in all months .get_amount_fed_to_humans source .get_amount_fed_to_humans( stored_food, outdoor_crops, immediate_outdoor_crops, new_stored_outdoor_crops, to_humans_ratio ) .get_sum_by_adding_to_humans source .get_sum_by_adding_to_humans() sum the resulting nutrients from the extracted_results, but subtract nonhuman to get the ratio also rounds result to 1 decimal place in terms of percent fed (within 0.1% of it's value) .get_sum_by_subtracting_nonhuman source .get_sum_by_subtracting_nonhuman( nonhuman_consumption ) sum the resulting nutrients from the extracted_results, but do this by adding all the amounts determined to go to humans .print_kcals_per_capita_per_day source .print_kcals_per_capita_per_day( interpreted_results ) This function prints the ratio of needs to actual needs for a given scenario result. .get_ratio_for_stored_food_and_outdoor_crops source .get_ratio_for_stored_food_and_outdoor_crops( outdoor_crops_plus_stored_food_rounded, nonhuman_consumption ) This function returns the ratio of stored food and outdoor crops that would be fed to humans, assuming that the rest goes to nonhuman consumption. It doesn't put any limit on the calories eaten by humans, technically the model just keeps metabolic waste at a similiar rate of waste based on the food price assigned, and then just continues feeding humans at their minimum macronutrient as high as it can. NOTE: outdoor_crops_plus_stored_food_rounded may not be exactly the same as the sum of stored food and outdoor crops, because the sum has been set equal to nonhuman consumption if there were rounding errors making the two slightly different. .get_percent_people_fed source .get_percent_people_fed( humans_fed_sum ) get the minimum nutrients required to meet the needs of the population in any month, for kcals, fat, and protein .correct_and_validate_rounding_errors source .correct_and_validate_rounding_errors( nonhuman_consumption ) any round error we might expect to be very small and easily fixable is corrected here. \"small\" is with respect to percent people fed Note the optimizer! .get_increased_excess_to_feed source .get_increased_excess_to_feed( feed_delay, percent_fed ) when calculating the excess calories, the amount of human edible feed used can't be more than the excess calories. Because the baseline feed usage is higher than in nuclear winter, we don't want to increase feed usage before the shutoff. this function adds an additional amount of excess at a consistent percentage in the months of interest (months to calculate diet) .sum_many_results_together source .sum_many_results_together( many_results, cap_at_100_percent ) sum together the results from many different runs of the model create a new object summing the results returns: the interpreter object with the summed results divided by the population in question","title":"Interpret results"},{"location":"modules/src/optimizer/interpret_results/#_1","text":"","title":""},{"location":"modules/src/optimizer/interpret_results/#interpreter","text":"source This class is used to convert between optimization results data and other useful ways of interpreting the results, as a diet, or as a total food supply. Methods:","title":"Interpreter"},{"location":"modules/src/optimizer/interpret_results/#interpret_results","text":"source .interpret_results( extracted_results, multi_valued_constants ) This function takes the raw output of the optimizer food categories and total people fed in list form, and converts the naive people fed which includes negative feed, into a purely list of values, where the negative feed has been subtracted from the sum of outdoor growing and stored food. ANYTHING assigned to \"self\" here is part of a useful result that will either be printed or plotted as a result","title":".interpret_results"},{"location":"modules/src/optimizer/interpret_results/#assign_percent_fed_from_extractor","text":"source .assign_percent_fed_from_extractor( extracted_results )","title":".assign_percent_fed_from_extractor"},{"location":"modules/src/optimizer/interpret_results/#assign_kcals_equivalent_from_extractor","text":"source .assign_kcals_equivalent_from_extractor( extracted_results )","title":".assign_kcals_equivalent_from_extractor"},{"location":"modules/src/optimizer/interpret_results/#set_to_humans_properties_kcals_equivalent","text":"source .set_to_humans_properties_kcals_equivalent( extracted_results )","title":".set_to_humans_properties_kcals_equivalent"},{"location":"modules/src/optimizer/interpret_results/#assign_time_months_middle","text":"source .assign_time_months_middle( NMONTHS )","title":".assign_time_months_middle"},{"location":"modules/src/optimizer/interpret_results/#assign_interpreted_properties","text":"source .assign_interpreted_properties( extracted_results )","title":".assign_interpreted_properties"},{"location":"modules/src/optimizer/interpret_results/#get_mean_min_nutrient","text":"source .get_mean_min_nutrient() for finding the minimum of any nutrient in any month and then getting the mean people fed in all the months This is useful for assessing what would have happened if stored food were not a constraint on number of people fed returns: the mean people fed in all months","title":".get_mean_min_nutrient"},{"location":"modules/src/optimizer/interpret_results/#get_amount_fed_to_humans","text":"source .get_amount_fed_to_humans( stored_food, outdoor_crops, immediate_outdoor_crops, new_stored_outdoor_crops, to_humans_ratio )","title":".get_amount_fed_to_humans"},{"location":"modules/src/optimizer/interpret_results/#get_sum_by_adding_to_humans","text":"source .get_sum_by_adding_to_humans() sum the resulting nutrients from the extracted_results, but subtract nonhuman to get the ratio also rounds result to 1 decimal place in terms of percent fed (within 0.1% of it's value)","title":".get_sum_by_adding_to_humans"},{"location":"modules/src/optimizer/interpret_results/#get_sum_by_subtracting_nonhuman","text":"source .get_sum_by_subtracting_nonhuman( nonhuman_consumption ) sum the resulting nutrients from the extracted_results, but do this by adding all the amounts determined to go to humans","title":".get_sum_by_subtracting_nonhuman"},{"location":"modules/src/optimizer/interpret_results/#print_kcals_per_capita_per_day","text":"source .print_kcals_per_capita_per_day( interpreted_results ) This function prints the ratio of needs to actual needs for a given scenario result.","title":".print_kcals_per_capita_per_day"},{"location":"modules/src/optimizer/interpret_results/#get_ratio_for_stored_food_and_outdoor_crops","text":"source .get_ratio_for_stored_food_and_outdoor_crops( outdoor_crops_plus_stored_food_rounded, nonhuman_consumption ) This function returns the ratio of stored food and outdoor crops that would be fed to humans, assuming that the rest goes to nonhuman consumption. It doesn't put any limit on the calories eaten by humans, technically the model just keeps metabolic waste at a similiar rate of waste based on the food price assigned, and then just continues feeding humans at their minimum macronutrient as high as it can. NOTE: outdoor_crops_plus_stored_food_rounded may not be exactly the same as the sum of stored food and outdoor crops, because the sum has been set equal to nonhuman consumption if there were rounding errors making the two slightly different.","title":".get_ratio_for_stored_food_and_outdoor_crops"},{"location":"modules/src/optimizer/interpret_results/#get_percent_people_fed","text":"source .get_percent_people_fed( humans_fed_sum ) get the minimum nutrients required to meet the needs of the population in any month, for kcals, fat, and protein","title":".get_percent_people_fed"},{"location":"modules/src/optimizer/interpret_results/#correct_and_validate_rounding_errors","text":"source .correct_and_validate_rounding_errors( nonhuman_consumption ) any round error we might expect to be very small and easily fixable is corrected here. \"small\" is with respect to percent people fed Note the optimizer!","title":".correct_and_validate_rounding_errors"},{"location":"modules/src/optimizer/interpret_results/#get_increased_excess_to_feed","text":"source .get_increased_excess_to_feed( feed_delay, percent_fed ) when calculating the excess calories, the amount of human edible feed used can't be more than the excess calories. Because the baseline feed usage is higher than in nuclear winter, we don't want to increase feed usage before the shutoff. this function adds an additional amount of excess at a consistent percentage in the months of interest (months to calculate diet)","title":".get_increased_excess_to_feed"},{"location":"modules/src/optimizer/interpret_results/#sum_many_results_together","text":"source .sum_many_results_together( many_results, cap_at_100_percent ) sum together the results from many different runs of the model create a new object summing the results returns: the interpreter object with the summed results divided by the population in question","title":".sum_many_results_together"},{"location":"modules/src/optimizer/optimizer/","text":"Optimizer source Methods: .optimize source .optimize( single_valued_constants, multi_valued_constants ) .second_optimization_smoothing source .second_optimization_smoothing( model, variables, NMONTHS, ASSERT_SUCCESSFUL_OPTIMIZATION, single_valued_constants ) in this case we are trying to get the differences between all the variables to be the smallest, without causing the optimization to fail. .add_seaweed_to_model source .add_seaweed_to_model( model, variables, month ) .add_stored_food_to_model_only_first_year source .add_stored_food_to_model_only_first_year( model, variables, month ) .add_stored_food_to_model source .add_stored_food_to_model( model, variables, month ) .add_culled_meat_to_model source .add_culled_meat_to_model( model, variables, month ) incorporate linear constraints for culled meat consumption each month it's like stored food, but there is a preset limit for how much can be produced .add_outdoor_crops_to_model_no_relocation source .add_outdoor_crops_to_model_no_relocation( model, variables, month ) .add_outdoor_crops_to_model_no_storage source .add_outdoor_crops_to_model_no_storage( model, variables, month ) .add_outdoor_crops_to_model source .add_outdoor_crops_to_model( model, variables, month ) .add_objectives_to_model source .add_objectives_to_model( model, variables, month, maximize_constraints )","title":"Optimizer"},{"location":"modules/src/optimizer/optimizer/#_1","text":"","title":""},{"location":"modules/src/optimizer/optimizer/#optimizer","text":"source Methods:","title":"Optimizer"},{"location":"modules/src/optimizer/optimizer/#optimize","text":"source .optimize( single_valued_constants, multi_valued_constants )","title":".optimize"},{"location":"modules/src/optimizer/optimizer/#second_optimization_smoothing","text":"source .second_optimization_smoothing( model, variables, NMONTHS, ASSERT_SUCCESSFUL_OPTIMIZATION, single_valued_constants ) in this case we are trying to get the differences between all the variables to be the smallest, without causing the optimization to fail.","title":".second_optimization_smoothing"},{"location":"modules/src/optimizer/optimizer/#add_seaweed_to_model","text":"source .add_seaweed_to_model( model, variables, month )","title":".add_seaweed_to_model"},{"location":"modules/src/optimizer/optimizer/#add_stored_food_to_model_only_first_year","text":"source .add_stored_food_to_model_only_first_year( model, variables, month )","title":".add_stored_food_to_model_only_first_year"},{"location":"modules/src/optimizer/optimizer/#add_stored_food_to_model","text":"source .add_stored_food_to_model( model, variables, month )","title":".add_stored_food_to_model"},{"location":"modules/src/optimizer/optimizer/#add_culled_meat_to_model","text":"source .add_culled_meat_to_model( model, variables, month ) incorporate linear constraints for culled meat consumption each month it's like stored food, but there is a preset limit for how much can be produced","title":".add_culled_meat_to_model"},{"location":"modules/src/optimizer/optimizer/#add_outdoor_crops_to_model_no_relocation","text":"source .add_outdoor_crops_to_model_no_relocation( model, variables, month )","title":".add_outdoor_crops_to_model_no_relocation"},{"location":"modules/src/optimizer/optimizer/#add_outdoor_crops_to_model_no_storage","text":"source .add_outdoor_crops_to_model_no_storage( model, variables, month )","title":".add_outdoor_crops_to_model_no_storage"},{"location":"modules/src/optimizer/optimizer/#add_outdoor_crops_to_model","text":"source .add_outdoor_crops_to_model( model, variables, month )","title":".add_outdoor_crops_to_model"},{"location":"modules/src/optimizer/optimizer/#add_objectives_to_model","text":"source .add_objectives_to_model( model, variables, month, maximize_constraints )","title":".add_objectives_to_model"},{"location":"modules/src/optimizer/parameters/","text":"Parameters source Methods: .computeParameters source .computeParameters( constants_inputs, scenarios_loader ) .init_scenario source .init_scenario( constants_out, constants_inputs ) Initialize the scenario for some constants_out used for the optimizer. .set_nutrition_per_month source .set_nutrition_per_month( constants_out, constants_inputs ) Set the nutrition per month for the simulation. .set_seaweed_params source .set_seaweed_params( constants_out, constants_inputs ) Set the seaweed parameters. .init_outdoor_crops source .init_outdoor_crops( constants_out, constants_inputs ) initialize the outdoor crops parameters .init_stored_food source .init_stored_food( constants_out, constants_inputs, outdoor_crops ) .init_fish_params source .init_fish_params( constants_out, time_consts, constants_inputs ) Initialize seafood parameters, not including seaweed .init_greenhouse_params source .init_greenhouse_params( time_consts, constants_inputs, outdoor_crops ) Initialize the greenhouse parameters. .init_cs_params source .init_cs_params( time_consts, constants_inputs ) Initialize the parameters for the cellulosic sugar model .init_scp_params source .init_scp_params( time_consts, constants_inputs ) Initialize the parameters for single cell protein .init_feed_and_biofuels source .init_feed_and_biofuels( time_consts, constants_inputs, outdoor_crops, stored_food ) Initialize feed and biofuels parameters. .init_meat_and_dairy_and_feed_from_breeding source .init_meat_and_dairy_and_feed_from_breeding( constants_out, constants_inputs, time_consts, outdoor_crops, stored_food ) In the case of a breeding reduction strategy rather than increased slaughter, we first calculate the expected amount of livestock if breeding were quickly reduced and slaughter only increased slightly, then using that we calculate the feed they would use given the expected input animal populations over time. .init_meat_and_dairy_params source .init_meat_and_dairy_params( constants_inputs, constants_out, time_consts, feed_and_biofuels, outdoor_crops ) Meat and dairy are initialized here. NOTE: Important convention: anything pre-waste is marked so. Everything else that could include waste should be assumed to be post-waste if not marked .init_grazing_params source .init_grazing_params( constants_inputs, time_consts, meat_and_dairy ) .init_grain_fed_meat_params source .init_grain_fed_meat_params( time_consts, meat_and_dairy, feed_and_biofuels, constants_inputs, outdoor_crops ) .init_culled_meat_params source .init_culled_meat_params( constants_inputs, constants_out, time_consts, meat_and_dairy )","title":"Parameters"},{"location":"modules/src/optimizer/parameters/#_1","text":"","title":""},{"location":"modules/src/optimizer/parameters/#parameters","text":"source Methods:","title":"Parameters"},{"location":"modules/src/optimizer/parameters/#computeparameters","text":"source .computeParameters( constants_inputs, scenarios_loader )","title":".computeParameters"},{"location":"modules/src/optimizer/parameters/#init_scenario","text":"source .init_scenario( constants_out, constants_inputs ) Initialize the scenario for some constants_out used for the optimizer.","title":".init_scenario"},{"location":"modules/src/optimizer/parameters/#set_nutrition_per_month","text":"source .set_nutrition_per_month( constants_out, constants_inputs ) Set the nutrition per month for the simulation.","title":".set_nutrition_per_month"},{"location":"modules/src/optimizer/parameters/#set_seaweed_params","text":"source .set_seaweed_params( constants_out, constants_inputs ) Set the seaweed parameters.","title":".set_seaweed_params"},{"location":"modules/src/optimizer/parameters/#init_outdoor_crops","text":"source .init_outdoor_crops( constants_out, constants_inputs ) initialize the outdoor crops parameters","title":".init_outdoor_crops"},{"location":"modules/src/optimizer/parameters/#init_stored_food","text":"source .init_stored_food( constants_out, constants_inputs, outdoor_crops )","title":".init_stored_food"},{"location":"modules/src/optimizer/parameters/#init_fish_params","text":"source .init_fish_params( constants_out, time_consts, constants_inputs ) Initialize seafood parameters, not including seaweed","title":".init_fish_params"},{"location":"modules/src/optimizer/parameters/#init_greenhouse_params","text":"source .init_greenhouse_params( time_consts, constants_inputs, outdoor_crops ) Initialize the greenhouse parameters.","title":".init_greenhouse_params"},{"location":"modules/src/optimizer/parameters/#init_cs_params","text":"source .init_cs_params( time_consts, constants_inputs ) Initialize the parameters for the cellulosic sugar model","title":".init_cs_params"},{"location":"modules/src/optimizer/parameters/#init_scp_params","text":"source .init_scp_params( time_consts, constants_inputs ) Initialize the parameters for single cell protein","title":".init_scp_params"},{"location":"modules/src/optimizer/parameters/#init_feed_and_biofuels","text":"source .init_feed_and_biofuels( time_consts, constants_inputs, outdoor_crops, stored_food ) Initialize feed and biofuels parameters.","title":".init_feed_and_biofuels"},{"location":"modules/src/optimizer/parameters/#init_meat_and_dairy_and_feed_from_breeding","text":"source .init_meat_and_dairy_and_feed_from_breeding( constants_out, constants_inputs, time_consts, outdoor_crops, stored_food ) In the case of a breeding reduction strategy rather than increased slaughter, we first calculate the expected amount of livestock if breeding were quickly reduced and slaughter only increased slightly, then using that we calculate the feed they would use given the expected input animal populations over time.","title":".init_meat_and_dairy_and_feed_from_breeding"},{"location":"modules/src/optimizer/parameters/#init_meat_and_dairy_params","text":"source .init_meat_and_dairy_params( constants_inputs, constants_out, time_consts, feed_and_biofuels, outdoor_crops ) Meat and dairy are initialized here. NOTE: Important convention: anything pre-waste is marked so. Everything else that could include waste should be assumed to be post-waste if not marked","title":".init_meat_and_dairy_params"},{"location":"modules/src/optimizer/parameters/#init_grazing_params","text":"source .init_grazing_params( constants_inputs, time_consts, meat_and_dairy )","title":".init_grazing_params"},{"location":"modules/src/optimizer/parameters/#init_grain_fed_meat_params","text":"source .init_grain_fed_meat_params( time_consts, meat_and_dairy, feed_and_biofuels, constants_inputs, outdoor_crops )","title":".init_grain_fed_meat_params"},{"location":"modules/src/optimizer/parameters/#init_culled_meat_params","text":"source .init_culled_meat_params( constants_inputs, constants_out, time_consts, meat_and_dairy )","title":".init_culled_meat_params"},{"location":"modules/src/optimizer/validate_results/","text":"Validator source Methods: .validate_results source .validate_results( model, extracted_results, interpreted_results ) .check_constraints_satisfied source .check_constraints_satisfied( model, maximize_constraints, variables ) passing in the variables explicitly to the constraint checker here ensures that the final values that are used in reports are explicitly validated against all the constraints. NOTE: THIS FUNCTION TAKES A REALLY, REALLY LONG TIME SO IT'S RUN INFREQUENTLY .ensure_optimizer_returns_same_as_sum_nutrients source .ensure_optimizer_returns_same_as_sum_nutrients( model, interpreted_results, INCLUDE_FAT, INCLUDE_PROTEIN ) ensure there was no major error in the optimizer or in analysis which caused the sums reported to differ between adding up all the extracted variables and just look at the reported result of the objective of the optimizer .ensure_zero_kcals_have_zero_fat_and_protein source .ensure_zero_kcals_have_zero_fat_and_protein( interpreted_results ) checks that for any month where kcals is zero for any of the foods, then fat and protein must also be zero. True for every food source and also for feed and biofuels independently. .ensure_never_nan source .ensure_never_nan( interpreted_results ) checks that the interpreter results are always defined as a real number .ensure_all_greater_than_or_equal_to_zero source .ensure_all_greater_than_or_equal_to_zero( interpreted_results ) checks that all the results variables are greater than or equal to zero","title":"Validate results"},{"location":"modules/src/optimizer/validate_results/#_1","text":"","title":""},{"location":"modules/src/optimizer/validate_results/#validator","text":"source Methods:","title":"Validator"},{"location":"modules/src/optimizer/validate_results/#validate_results","text":"source .validate_results( model, extracted_results, interpreted_results )","title":".validate_results"},{"location":"modules/src/optimizer/validate_results/#check_constraints_satisfied","text":"source .check_constraints_satisfied( model, maximize_constraints, variables ) passing in the variables explicitly to the constraint checker here ensures that the final values that are used in reports are explicitly validated against all the constraints. NOTE: THIS FUNCTION TAKES A REALLY, REALLY LONG TIME SO IT'S RUN INFREQUENTLY","title":".check_constraints_satisfied"},{"location":"modules/src/optimizer/validate_results/#ensure_optimizer_returns_same_as_sum_nutrients","text":"source .ensure_optimizer_returns_same_as_sum_nutrients( model, interpreted_results, INCLUDE_FAT, INCLUDE_PROTEIN ) ensure there was no major error in the optimizer or in analysis which caused the sums reported to differ between adding up all the extracted variables and just look at the reported result of the objective of the optimizer","title":".ensure_optimizer_returns_same_as_sum_nutrients"},{"location":"modules/src/optimizer/validate_results/#ensure_zero_kcals_have_zero_fat_and_protein","text":"source .ensure_zero_kcals_have_zero_fat_and_protein( interpreted_results ) checks that for any month where kcals is zero for any of the foods, then fat and protein must also be zero. True for every food source and also for feed and biofuels independently.","title":".ensure_zero_kcals_have_zero_fat_and_protein"},{"location":"modules/src/optimizer/validate_results/#ensure_never_nan","text":"source .ensure_never_nan( interpreted_results ) checks that the interpreter results are always defined as a real number","title":".ensure_never_nan"},{"location":"modules/src/optimizer/validate_results/#ensure_all_greater_than_or_equal_to_zero","text":"source .ensure_all_greater_than_or_equal_to_zero( interpreted_results ) checks that all the results variables are greater than or equal to zero","title":".ensure_all_greater_than_or_equal_to_zero"},{"location":"modules/src/scenarios/create_figure_1ab/","text":"call_scenario_runner source .call_scenario_runner( this_simulation, title ) call_scenario_runner_with_and_without_fat_protein source .call_scenario_runner_with_and_without_fat_protein( this_simulation, title ) recalculate_plots source .recalculate_plots()","title":"Create figure 1ab"},{"location":"modules/src/scenarios/create_figure_1ab/#_1","text":"","title":""},{"location":"modules/src/scenarios/create_figure_1ab/#call_scenario_runner","text":"source .call_scenario_runner( this_simulation, title )","title":"call_scenario_runner"},{"location":"modules/src/scenarios/create_figure_1ab/#call_scenario_runner_with_and_without_fat_protein","text":"source .call_scenario_runner_with_and_without_fat_protein( this_simulation, title )","title":"call_scenario_runner_with_and_without_fat_protein"},{"location":"modules/src/scenarios/create_figure_1ab/#recalculate_plots","text":"source .recalculate_plots()","title":"recalculate_plots"},{"location":"modules/src/scenarios/create_figure_2abcde/","text":"call_scenario_runner source .call_scenario_runner( this_simulation, title ) call_scenario_runner_whole_world_combined source .call_scenario_runner_whole_world_combined( this_simulation, title ) call_scenario_runner_with_and_without_fat_protein source .call_scenario_runner_with_and_without_fat_protein( this_simulation, title ) recalculate_plots source .recalculate_plots()","title":"Create figure 2abcde"},{"location":"modules/src/scenarios/create_figure_2abcde/#_1","text":"","title":""},{"location":"modules/src/scenarios/create_figure_2abcde/#call_scenario_runner","text":"source .call_scenario_runner( this_simulation, title )","title":"call_scenario_runner"},{"location":"modules/src/scenarios/create_figure_2abcde/#call_scenario_runner_whole_world_combined","text":"source .call_scenario_runner_whole_world_combined( this_simulation, title )","title":"call_scenario_runner_whole_world_combined"},{"location":"modules/src/scenarios/create_figure_2abcde/#call_scenario_runner_with_and_without_fat_protein","text":"source .call_scenario_runner_with_and_without_fat_protein( this_simulation, title )","title":"call_scenario_runner_with_and_without_fat_protein"},{"location":"modules/src/scenarios/create_figure_2abcde/#recalculate_plots","text":"source .recalculate_plots()","title":"recalculate_plots"},{"location":"modules/src/scenarios/create_figure_3abcd/","text":"call_scenario_runner source .call_scenario_runner( this_simulation, title )","title":"Create figure 3abcd"},{"location":"modules/src/scenarios/create_figure_3abcd/#_1","text":"","title":""},{"location":"modules/src/scenarios/create_figure_3abcd/#call_scenario_runner","text":"source .call_scenario_runner( this_simulation, title )","title":"call_scenario_runner"},{"location":"modules/src/scenarios/run_USA_with_improved_numbers/","text":"run_USA_with_and_without_resilient source .run_USA_with_and_without_resilient()","title":"run USA with improved numbers"},{"location":"modules/src/scenarios/run_USA_with_improved_numbers/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_USA_with_improved_numbers/#run_usa_with_and_without_resilient","text":"source .run_USA_with_and_without_resilient()","title":"run_USA_with_and_without_resilient"},{"location":"modules/src/scenarios/run_model_baseline/","text":"run_model_baseline source .run_model_baseline( plot_figures = True ) this program runs the optimizer model, in the case of continued trade and baseline climate 2020 Arguments plot_figures (bool) : whether to plot the figures or not. Returns None set_common_baseline_properties source .set_common_baseline_properties()","title":"Run model baseline"},{"location":"modules/src/scenarios/run_model_baseline/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_model_baseline/#run_model_baseline","text":"source .run_model_baseline( plot_figures = True ) this program runs the optimizer model, in the case of continued trade and baseline climate 2020 Arguments plot_figures (bool) : whether to plot the figures or not. Returns None","title":"run_model_baseline"},{"location":"modules/src/scenarios/run_model_baseline/#set_common_baseline_properties","text":"source .set_common_baseline_properties()","title":"set_common_baseline_properties"},{"location":"modules/src/scenarios/run_model_no_resilient_foods/","text":"run_model_no_resilient_foods source .run_model_no_resilient_foods( plot_figures = True ) this program runs the optimizer model, and ensures that all the results are reasonable using a couple useful checks to make sure there's nothing wacky going on: 1) check that as time increases, more people can be fed 2) check that stored food plus meat is always used at the highest rate during the largest food shortage. Arguments plot_figures (bool) : whether to plot the figures or not. Returns None set_common_no_resilient_properties source .set_common_no_resilient_properties()","title":"Run model no resilient foods"},{"location":"modules/src/scenarios/run_model_no_resilient_foods/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_model_no_resilient_foods/#run_model_no_resilient_foods","text":"source .run_model_no_resilient_foods( plot_figures = True ) this program runs the optimizer model, and ensures that all the results are reasonable using a couple useful checks to make sure there's nothing wacky going on: 1) check that as time increases, more people can be fed 2) check that stored food plus meat is always used at the highest rate during the largest food shortage. Arguments plot_figures (bool) : whether to plot the figures or not. Returns None","title":"run_model_no_resilient_foods"},{"location":"modules/src/scenarios/run_model_no_resilient_foods/#set_common_no_resilient_properties","text":"source .set_common_no_resilient_properties()","title":"set_common_no_resilient_properties"},{"location":"modules/src/scenarios/run_model_no_trade/","text":"ScenarioRunnerNoTrade source This function runs the model for all countries in the world, no trade. Methods: .run_model_defaults_no_trade source .run_model_defaults_no_trade( this_simulation, show_map_figures = False, show_country_figures = False, create_pptx_with_all_countries = False, scenario_option = [] ) Set a few options to set on top of the specific options for the given simulation These could easily change if another scenario was of more interest. .run_optimizer_for_country source .run_optimizer_for_country( country_code, country_data, scenario_option, create_pptx_with_all_countries, show_country_figures, figure_save_postfix = '' ) .fill_data_for_map source .fill_data_for_map( world, country_code, needs_ratio ) .run_model_no_trade source .run_model_no_trade( title = 'untitled', create_pptx_with_all_countries = True, show_country_figures = False, show_map_figures = False, add_map_slide_to_pptx = True, scenario_option = [], countries_list = [], figure_save_postfix = '', return_results = False ) This function runs the model for all countries in the world, no trade. countries_list is a list of country codes to run the model for, but if there's an \"!\" in the list, you skip that one. If you leave it blank, it runs all the countries You can generate a powerpoint as an option here too .get_countries_to_run_and_skip source .get_countries_to_run_and_skip( countries_list ) if there's any country code with a \"!\", skip that one For example, if !USA is one of the country codes, that one will be skipped If !USA and !CHN are country codes, then both will skip if there's no ! in any of the codes, then only the ones listed will be run. .run_many_options source .run_many_options( scenario_options, title, add_map_slide_to_pptx = True, show_map_figures = False, countries_list = [], return_results = False ) .create_several_maps_with_different_assumptions source .create_several_maps_with_different_assumptions( this_simulation, show_map_figures = False ) .run_desired_simulation source .run_desired_simulation( this_simulation, args )","title":"Run model no trade"},{"location":"modules/src/scenarios/run_model_no_trade/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_model_no_trade/#scenariorunnernotrade","text":"source This function runs the model for all countries in the world, no trade. Methods:","title":"ScenarioRunnerNoTrade"},{"location":"modules/src/scenarios/run_model_no_trade/#run_model_defaults_no_trade","text":"source .run_model_defaults_no_trade( this_simulation, show_map_figures = False, show_country_figures = False, create_pptx_with_all_countries = False, scenario_option = [] ) Set a few options to set on top of the specific options for the given simulation These could easily change if another scenario was of more interest.","title":".run_model_defaults_no_trade"},{"location":"modules/src/scenarios/run_model_no_trade/#run_optimizer_for_country","text":"source .run_optimizer_for_country( country_code, country_data, scenario_option, create_pptx_with_all_countries, show_country_figures, figure_save_postfix = '' )","title":".run_optimizer_for_country"},{"location":"modules/src/scenarios/run_model_no_trade/#fill_data_for_map","text":"source .fill_data_for_map( world, country_code, needs_ratio )","title":".fill_data_for_map"},{"location":"modules/src/scenarios/run_model_no_trade/#run_model_no_trade","text":"source .run_model_no_trade( title = 'untitled', create_pptx_with_all_countries = True, show_country_figures = False, show_map_figures = False, add_map_slide_to_pptx = True, scenario_option = [], countries_list = [], figure_save_postfix = '', return_results = False ) This function runs the model for all countries in the world, no trade. countries_list is a list of country codes to run the model for, but if there's an \"!\" in the list, you skip that one. If you leave it blank, it runs all the countries You can generate a powerpoint as an option here too","title":".run_model_no_trade"},{"location":"modules/src/scenarios/run_model_no_trade/#get_countries_to_run_and_skip","text":"source .get_countries_to_run_and_skip( countries_list ) if there's any country code with a \"!\", skip that one For example, if !USA is one of the country codes, that one will be skipped If !USA and !CHN are country codes, then both will skip if there's no ! in any of the codes, then only the ones listed will be run.","title":".get_countries_to_run_and_skip"},{"location":"modules/src/scenarios/run_model_no_trade/#run_many_options","text":"source .run_many_options( scenario_options, title, add_map_slide_to_pptx = True, show_map_figures = False, countries_list = [], return_results = False )","title":".run_many_options"},{"location":"modules/src/scenarios/run_model_no_trade/#create_several_maps_with_different_assumptions","text":"source .create_several_maps_with_different_assumptions( this_simulation, show_map_figures = False )","title":".create_several_maps_with_different_assumptions"},{"location":"modules/src/scenarios/run_model_no_trade/#run_desired_simulation","text":"source .run_desired_simulation( this_simulation, args )","title":".run_desired_simulation"},{"location":"modules/src/scenarios/run_model_with_resilient_foods/","text":"run_model_with_resilient_foods source .run_model_with_resilient_foods( plot_figures = True ) Runs the model in nuclear winter with resilient foods, then calculates a diet The diet is 2100 kcals, determined by feeding any excess to animals This currently runs for the whole earth, and does not run on a by-country basis. Arguments plot_figures (bool) : whether to plot the figures or not. Returns None set_common_resilient_properties source .set_common_resilient_properties()","title":"Run model with resilient foods"},{"location":"modules/src/scenarios/run_model_with_resilient_foods/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_model_with_resilient_foods/#run_model_with_resilient_foods","text":"source .run_model_with_resilient_foods( plot_figures = True ) Runs the model in nuclear winter with resilient foods, then calculates a diet The diet is 2100 kcals, determined by feeding any excess to animals This currently runs for the whole earth, and does not run on a by-country basis. Arguments plot_figures (bool) : whether to plot the figures or not. Returns None","title":"run_model_with_resilient_foods"},{"location":"modules/src/scenarios/run_model_with_resilient_foods/#set_common_resilient_properties","text":"source .set_common_resilient_properties()","title":"set_common_resilient_properties"},{"location":"modules/src/scenarios/run_scenario/","text":"ScenarioRunner source Methods: .run_and_analyze_scenario source .run_and_analyze_scenario( constants_for_params, scenarios_loader ) computes params, Runs the optimizer, extracts data from optimizer, interprets the results, validates the results, and optionally prints an output with people fed. arguments: constants from the scenario, scenario loader (to print the aspects of the scenario and check no scenario parameter has been set twice or left unset) returns: the interpreted results .compute_parameters source .compute_parameters( constants_for_params, scenarios_loader ) computes the parameters returns the resulting constants .run_optimizer source .run_optimizer( single_valued_constants, multi_valued_constants ) Runs the optimizer and returns the model, variables, and constants .set_depending_on_option source .set_depending_on_option( country_data, scenario_option )","title":"Run scenario"},{"location":"modules/src/scenarios/run_scenario/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_scenario/#scenariorunner","text":"source Methods:","title":"ScenarioRunner"},{"location":"modules/src/scenarios/run_scenario/#run_and_analyze_scenario","text":"source .run_and_analyze_scenario( constants_for_params, scenarios_loader ) computes params, Runs the optimizer, extracts data from optimizer, interprets the results, validates the results, and optionally prints an output with people fed. arguments: constants from the scenario, scenario loader (to print the aspects of the scenario and check no scenario parameter has been set twice or left unset) returns: the interpreted results","title":".run_and_analyze_scenario"},{"location":"modules/src/scenarios/run_scenario/#compute_parameters","text":"source .compute_parameters( constants_for_params, scenarios_loader ) computes the parameters returns the resulting constants","title":".compute_parameters"},{"location":"modules/src/scenarios/run_scenario/#run_optimizer","text":"source .run_optimizer( single_valued_constants, multi_valued_constants ) Runs the optimizer and returns the model, variables, and constants","title":".run_optimizer"},{"location":"modules/src/scenarios/run_scenario/#set_depending_on_option","text":"source .set_depending_on_option( country_data, scenario_option )","title":".set_depending_on_option"},{"location":"modules/src/scenarios/scenarios/","text":"Scenarios source Methods: .check_all_set source .check_all_set() Ensure all properties of scenarios have been set .init_generic_scenario source .init_generic_scenario() .init_global_food_system_properties source .init_global_food_system_properties() .init_country_food_system_properties source .init_country_food_system_properties( country_data ) .set_immediate_shutoff source .set_immediate_shutoff( constants_for_params ) .set_short_delayed_shutoff source .set_short_delayed_shutoff( constants_for_params ) .set_long_delayed_shutoff source .set_long_delayed_shutoff( constants_for_params ) .reduce_breeding_USA source .reduce_breeding_USA( constants_for_params ) .set_continued_feed_biofuels source .set_continued_feed_biofuels( constants_for_params ) .set_unchanged_proportions_feed_grazing source .set_unchanged_proportions_feed_grazing( constants_for_params ) .set_efficient_feed_grazing_strategy source .set_efficient_feed_grazing_strategy( constants_for_params ) .set_feed_based_on_livestock_levels source .set_feed_based_on_livestock_levels( constants_for_params ) .set_excess_to_zero source .set_excess_to_zero( constants_for_params ) .set_excess source .set_excess( constants_for_params, excess ) .set_waste_to_zero source .set_waste_to_zero( constants_for_params ) .get_total_global_waste source .get_total_global_waste( retail_waste ) Calculates the total waste of the global food system by adding retail waste to distribution loss. .set_global_waste_to_tripled_prices source .set_global_waste_to_tripled_prices( constants_for_params ) .set_global_waste_to_doubled_prices source .set_global_waste_to_doubled_prices( constants_for_params ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020) .set_global_waste_to_baseline_prices source .set_global_waste_to_baseline_prices( constants_for_params ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020) .get_total_country_waste source .get_total_country_waste( retail_waste, country_data ) Calculates the total waste of the global food system by adding retail waste to distribution loss. .set_country_waste_to_tripled_prices source .set_country_waste_to_tripled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 3x prices (note, currently set to 2019, not 2020) .set_country_waste_to_doubled_prices source .set_country_waste_to_doubled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020) .set_country_waste_to_baseline_prices source .set_country_waste_to_baseline_prices( constants_for_params, country_data ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020) .set_baseline_nutrition_profile source .set_baseline_nutrition_profile( constants_for_params ) .set_catastrophe_nutrition_profile source .set_catastrophe_nutrition_profile( constants_for_params ) .set_no_stored_food source .set_no_stored_food( constants_for_params ) Sets the stored food between years as zero. No food is traded between the 12 month intervals seasons. Makes more sense if seasonality is assumed zero. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer. .set_stored_food_buffer_zero source .set_stored_food_buffer_zero( constants_for_params ) Sets the stored food buffer as zero -- no stored food left at the end of the simulation. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer. .set_stored_food_buffer_as_baseline source .set_stored_food_buffer_as_baseline( constants_for_params ) Sets the stored food buffer as 100% -- the typical stored food buffer in ~2020 left at the end of the simulation. .set_no_seasonality source .set_no_seasonality( constants_for_params ) .set_global_seasonality_baseline source .set_global_seasonality_baseline( constants_for_params ) .set_global_seasonality_nuclear_winter source .set_global_seasonality_nuclear_winter( constants_for_params ) .set_country_seasonality source .set_country_seasonality( constants_for_params, country_data ) .set_grasses_baseline source .set_grasses_baseline( constants_for_params ) .set_global_grasses_nuclear_winter source .set_global_grasses_nuclear_winter( constants_for_params ) .set_country_grasses_nuclear_winter source .set_country_grasses_nuclear_winter( constants_for_params, country_data ) .set_fish_nuclear_winter_reduction source .set_fish_nuclear_winter_reduction( constants_for_params ) Set the fish percentages in every country (or globally) from baseline although this is a global number, we don't have the regional number, so we use the global instead. .set_fish_baseline source .set_fish_baseline( constants_for_params ) .set_disruption_to_crops_to_zero source .set_disruption_to_crops_to_zero( constants_for_params ) .set_nuclear_winter_global_disruption_to_crops source .set_nuclear_winter_global_disruption_to_crops( constants_for_params ) .set_nuclear_winter_country_disruption_to_crops source .set_nuclear_winter_country_disruption_to_crops( constants_for_params, country_data ) .include_protein source .include_protein( constants_for_params ) .dont_include_protein source .dont_include_protein( constants_for_params ) .include_fat source .include_fat( constants_for_params ) .dont_include_fat source .dont_include_fat( constants_for_params ) .no_resilient_foods source .no_resilient_foods( constants_for_params ) .seaweed source .seaweed( constants_for_params ) .greenhouse source .greenhouse( constants_for_params ) .relocated_outdoor_crops source .relocated_outdoor_crops( constants_for_params ) .methane_scp source .methane_scp( constants_for_params ) .cellulosic_sugar source .cellulosic_sugar( constants_for_params ) .get_all_resilient_foods_scenario source .get_all_resilient_foods_scenario( constants_for_params ) .get_seaweed_scenario source .get_seaweed_scenario( constants_for_params ) .get_methane_scp_scenario source .get_methane_scp_scenario( constants_for_params ) .get_cellulosic_sugar_scenario source .get_cellulosic_sugar_scenario( constants_for_params ) .get_relocated_crops_scenario source .get_relocated_crops_scenario( constants_for_params ) .get_greenhouse_scenario source .get_greenhouse_scenario( constants_for_params ) .get_no_resilient_food_scenario source .get_no_resilient_food_scenario( constants_for_params ) .cull_animals source .cull_animals( constants_for_params ) .dont_cull_animals source .dont_cull_animals( constants_for_params )","title":"Scenarios"},{"location":"modules/src/scenarios/scenarios/#_1","text":"","title":""},{"location":"modules/src/scenarios/scenarios/#scenarios","text":"source Methods:","title":"Scenarios"},{"location":"modules/src/scenarios/scenarios/#check_all_set","text":"source .check_all_set() Ensure all properties of scenarios have been set","title":".check_all_set"},{"location":"modules/src/scenarios/scenarios/#init_generic_scenario","text":"source .init_generic_scenario()","title":".init_generic_scenario"},{"location":"modules/src/scenarios/scenarios/#init_global_food_system_properties","text":"source .init_global_food_system_properties()","title":".init_global_food_system_properties"},{"location":"modules/src/scenarios/scenarios/#init_country_food_system_properties","text":"source .init_country_food_system_properties( country_data )","title":".init_country_food_system_properties"},{"location":"modules/src/scenarios/scenarios/#set_immediate_shutoff","text":"source .set_immediate_shutoff( constants_for_params )","title":".set_immediate_shutoff"},{"location":"modules/src/scenarios/scenarios/#set_short_delayed_shutoff","text":"source .set_short_delayed_shutoff( constants_for_params )","title":".set_short_delayed_shutoff"},{"location":"modules/src/scenarios/scenarios/#set_long_delayed_shutoff","text":"source .set_long_delayed_shutoff( constants_for_params )","title":".set_long_delayed_shutoff"},{"location":"modules/src/scenarios/scenarios/#reduce_breeding_usa","text":"source .reduce_breeding_USA( constants_for_params )","title":".reduce_breeding_USA"},{"location":"modules/src/scenarios/scenarios/#set_continued_feed_biofuels","text":"source .set_continued_feed_biofuels( constants_for_params )","title":".set_continued_feed_biofuels"},{"location":"modules/src/scenarios/scenarios/#set_unchanged_proportions_feed_grazing","text":"source .set_unchanged_proportions_feed_grazing( constants_for_params )","title":".set_unchanged_proportions_feed_grazing"},{"location":"modules/src/scenarios/scenarios/#set_efficient_feed_grazing_strategy","text":"source .set_efficient_feed_grazing_strategy( constants_for_params )","title":".set_efficient_feed_grazing_strategy"},{"location":"modules/src/scenarios/scenarios/#set_feed_based_on_livestock_levels","text":"source .set_feed_based_on_livestock_levels( constants_for_params )","title":".set_feed_based_on_livestock_levels"},{"location":"modules/src/scenarios/scenarios/#set_excess_to_zero","text":"source .set_excess_to_zero( constants_for_params )","title":".set_excess_to_zero"},{"location":"modules/src/scenarios/scenarios/#set_excess","text":"source .set_excess( constants_for_params, excess )","title":".set_excess"},{"location":"modules/src/scenarios/scenarios/#set_waste_to_zero","text":"source .set_waste_to_zero( constants_for_params )","title":".set_waste_to_zero"},{"location":"modules/src/scenarios/scenarios/#get_total_global_waste","text":"source .get_total_global_waste( retail_waste ) Calculates the total waste of the global food system by adding retail waste to distribution loss.","title":".get_total_global_waste"},{"location":"modules/src/scenarios/scenarios/#set_global_waste_to_tripled_prices","text":"source .set_global_waste_to_tripled_prices( constants_for_params )","title":".set_global_waste_to_tripled_prices"},{"location":"modules/src/scenarios/scenarios/#set_global_waste_to_doubled_prices","text":"source .set_global_waste_to_doubled_prices( constants_for_params ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020)","title":".set_global_waste_to_doubled_prices"},{"location":"modules/src/scenarios/scenarios/#set_global_waste_to_baseline_prices","text":"source .set_global_waste_to_baseline_prices( constants_for_params ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020)","title":".set_global_waste_to_baseline_prices"},{"location":"modules/src/scenarios/scenarios/#get_total_country_waste","text":"source .get_total_country_waste( retail_waste, country_data ) Calculates the total waste of the global food system by adding retail waste to distribution loss.","title":".get_total_country_waste"},{"location":"modules/src/scenarios/scenarios/#set_country_waste_to_tripled_prices","text":"source .set_country_waste_to_tripled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 3x prices (note, currently set to 2019, not 2020)","title":".set_country_waste_to_tripled_prices"},{"location":"modules/src/scenarios/scenarios/#set_country_waste_to_doubled_prices","text":"source .set_country_waste_to_doubled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020)","title":".set_country_waste_to_doubled_prices"},{"location":"modules/src/scenarios/scenarios/#set_country_waste_to_baseline_prices","text":"source .set_country_waste_to_baseline_prices( constants_for_params, country_data ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020)","title":".set_country_waste_to_baseline_prices"},{"location":"modules/src/scenarios/scenarios/#set_baseline_nutrition_profile","text":"source .set_baseline_nutrition_profile( constants_for_params )","title":".set_baseline_nutrition_profile"},{"location":"modules/src/scenarios/scenarios/#set_catastrophe_nutrition_profile","text":"source .set_catastrophe_nutrition_profile( constants_for_params )","title":".set_catastrophe_nutrition_profile"},{"location":"modules/src/scenarios/scenarios/#set_no_stored_food","text":"source .set_no_stored_food( constants_for_params ) Sets the stored food between years as zero. No food is traded between the 12 month intervals seasons. Makes more sense if seasonality is assumed zero. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer.","title":".set_no_stored_food"},{"location":"modules/src/scenarios/scenarios/#set_stored_food_buffer_zero","text":"source .set_stored_food_buffer_zero( constants_for_params ) Sets the stored food buffer as zero -- no stored food left at the end of the simulation. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer.","title":".set_stored_food_buffer_zero"},{"location":"modules/src/scenarios/scenarios/#set_stored_food_buffer_as_baseline","text":"source .set_stored_food_buffer_as_baseline( constants_for_params ) Sets the stored food buffer as 100% -- the typical stored food buffer in ~2020 left at the end of the simulation.","title":".set_stored_food_buffer_as_baseline"},{"location":"modules/src/scenarios/scenarios/#set_no_seasonality","text":"source .set_no_seasonality( constants_for_params )","title":".set_no_seasonality"},{"location":"modules/src/scenarios/scenarios/#set_global_seasonality_baseline","text":"source .set_global_seasonality_baseline( constants_for_params )","title":".set_global_seasonality_baseline"},{"location":"modules/src/scenarios/scenarios/#set_global_seasonality_nuclear_winter","text":"source .set_global_seasonality_nuclear_winter( constants_for_params )","title":".set_global_seasonality_nuclear_winter"},{"location":"modules/src/scenarios/scenarios/#set_country_seasonality","text":"source .set_country_seasonality( constants_for_params, country_data )","title":".set_country_seasonality"},{"location":"modules/src/scenarios/scenarios/#set_grasses_baseline","text":"source .set_grasses_baseline( constants_for_params )","title":".set_grasses_baseline"},{"location":"modules/src/scenarios/scenarios/#set_global_grasses_nuclear_winter","text":"source .set_global_grasses_nuclear_winter( constants_for_params )","title":".set_global_grasses_nuclear_winter"},{"location":"modules/src/scenarios/scenarios/#set_country_grasses_nuclear_winter","text":"source .set_country_grasses_nuclear_winter( constants_for_params, country_data )","title":".set_country_grasses_nuclear_winter"},{"location":"modules/src/scenarios/scenarios/#set_fish_nuclear_winter_reduction","text":"source .set_fish_nuclear_winter_reduction( constants_for_params ) Set the fish percentages in every country (or globally) from baseline although this is a global number, we don't have the regional number, so we use the global instead.","title":".set_fish_nuclear_winter_reduction"},{"location":"modules/src/scenarios/scenarios/#set_fish_baseline","text":"source .set_fish_baseline( constants_for_params )","title":".set_fish_baseline"},{"location":"modules/src/scenarios/scenarios/#set_disruption_to_crops_to_zero","text":"source .set_disruption_to_crops_to_zero( constants_for_params )","title":".set_disruption_to_crops_to_zero"},{"location":"modules/src/scenarios/scenarios/#set_nuclear_winter_global_disruption_to_crops","text":"source .set_nuclear_winter_global_disruption_to_crops( constants_for_params )","title":".set_nuclear_winter_global_disruption_to_crops"},{"location":"modules/src/scenarios/scenarios/#set_nuclear_winter_country_disruption_to_crops","text":"source .set_nuclear_winter_country_disruption_to_crops( constants_for_params, country_data )","title":".set_nuclear_winter_country_disruption_to_crops"},{"location":"modules/src/scenarios/scenarios/#include_protein","text":"source .include_protein( constants_for_params )","title":".include_protein"},{"location":"modules/src/scenarios/scenarios/#dont_include_protein","text":"source .dont_include_protein( constants_for_params )","title":".dont_include_protein"},{"location":"modules/src/scenarios/scenarios/#include_fat","text":"source .include_fat( constants_for_params )","title":".include_fat"},{"location":"modules/src/scenarios/scenarios/#dont_include_fat","text":"source .dont_include_fat( constants_for_params )","title":".dont_include_fat"},{"location":"modules/src/scenarios/scenarios/#no_resilient_foods","text":"source .no_resilient_foods( constants_for_params )","title":".no_resilient_foods"},{"location":"modules/src/scenarios/scenarios/#seaweed","text":"source .seaweed( constants_for_params )","title":".seaweed"},{"location":"modules/src/scenarios/scenarios/#greenhouse","text":"source .greenhouse( constants_for_params )","title":".greenhouse"},{"location":"modules/src/scenarios/scenarios/#relocated_outdoor_crops","text":"source .relocated_outdoor_crops( constants_for_params )","title":".relocated_outdoor_crops"},{"location":"modules/src/scenarios/scenarios/#methane_scp","text":"source .methane_scp( constants_for_params )","title":".methane_scp"},{"location":"modules/src/scenarios/scenarios/#cellulosic_sugar","text":"source .cellulosic_sugar( constants_for_params )","title":".cellulosic_sugar"},{"location":"modules/src/scenarios/scenarios/#get_all_resilient_foods_scenario","text":"source .get_all_resilient_foods_scenario( constants_for_params )","title":".get_all_resilient_foods_scenario"},{"location":"modules/src/scenarios/scenarios/#get_seaweed_scenario","text":"source .get_seaweed_scenario( constants_for_params )","title":".get_seaweed_scenario"},{"location":"modules/src/scenarios/scenarios/#get_methane_scp_scenario","text":"source .get_methane_scp_scenario( constants_for_params )","title":".get_methane_scp_scenario"},{"location":"modules/src/scenarios/scenarios/#get_cellulosic_sugar_scenario","text":"source .get_cellulosic_sugar_scenario( constants_for_params )","title":".get_cellulosic_sugar_scenario"},{"location":"modules/src/scenarios/scenarios/#get_relocated_crops_scenario","text":"source .get_relocated_crops_scenario( constants_for_params )","title":".get_relocated_crops_scenario"},{"location":"modules/src/scenarios/scenarios/#get_greenhouse_scenario","text":"source .get_greenhouse_scenario( constants_for_params )","title":".get_greenhouse_scenario"},{"location":"modules/src/scenarios/scenarios/#get_no_resilient_food_scenario","text":"source .get_no_resilient_food_scenario( constants_for_params )","title":".get_no_resilient_food_scenario"},{"location":"modules/src/scenarios/scenarios/#cull_animals","text":"source .cull_animals( constants_for_params )","title":".cull_animals"},{"location":"modules/src/scenarios/scenarios/#dont_cull_animals","text":"source .dont_cull_animals( constants_for_params )","title":".dont_cull_animals"},{"location":"modules/src/utilities/import_utilities/","text":"ImportUtilities source ImportUtilities() This class contains methods for importing data from various sources. Methods: .stack_on_list source .stack_on_list( list, layer ) create another layer on an existing stack of layers, or create the first layer in the stack example: adding [d,e,f] to a stack [ [a,b,c] ] gives you [ [a,b,c], [d,e,f] ] gets: the original list and the layer returns: the combined original and layer with the list stacked down below it .add_row_to_csv source .add_row_to_csv( nw_csv, country, country_name, reductions ) .weighted_average_percentages source .weighted_average_percentages( percentages, weights ) create a weighted average of percentages creates an average for a list of percentage reductions. Any non-possible number is removed. The remaining are averaged. If only non-possible numbers are included, then the result is a non-possible number 9.37e36 is returned if things are not valid .average_percentages source .average_percentages( percentages ) set up even weightings for the weighted average .average_columns source .average_columns( vstack ) average all the columns and return the result as a row gets: vertical stack of columns returns: a single row with the averages .clean_up_eswatini source .clean_up_eswatini( nw_csv ) change the swaziland country code from the FAOSTAT default to the USDA standard for compatibility with other datasets .import_csv source .import_csv( csv_loc, col_names, iso3_col_name ) import the csv and load into a dictionary","title":"Import utilities"},{"location":"modules/src/utilities/import_utilities/#_1","text":"","title":""},{"location":"modules/src/utilities/import_utilities/#importutilities","text":"source ImportUtilities() This class contains methods for importing data from various sources. Methods:","title":"ImportUtilities"},{"location":"modules/src/utilities/import_utilities/#stack_on_list","text":"source .stack_on_list( list, layer ) create another layer on an existing stack of layers, or create the first layer in the stack example: adding [d,e,f] to a stack [ [a,b,c] ] gives you [ [a,b,c], [d,e,f] ] gets: the original list and the layer returns: the combined original and layer with the list stacked down below it","title":".stack_on_list"},{"location":"modules/src/utilities/import_utilities/#add_row_to_csv","text":"source .add_row_to_csv( nw_csv, country, country_name, reductions )","title":".add_row_to_csv"},{"location":"modules/src/utilities/import_utilities/#weighted_average_percentages","text":"source .weighted_average_percentages( percentages, weights ) create a weighted average of percentages creates an average for a list of percentage reductions. Any non-possible number is removed. The remaining are averaged. If only non-possible numbers are included, then the result is a non-possible number 9.37e36 is returned if things are not valid","title":".weighted_average_percentages"},{"location":"modules/src/utilities/import_utilities/#average_percentages","text":"source .average_percentages( percentages ) set up even weightings for the weighted average","title":".average_percentages"},{"location":"modules/src/utilities/import_utilities/#average_columns","text":"source .average_columns( vstack ) average all the columns and return the result as a row gets: vertical stack of columns returns: a single row with the averages","title":".average_columns"},{"location":"modules/src/utilities/import_utilities/#clean_up_eswatini","text":"source .clean_up_eswatini( nw_csv ) change the swaziland country code from the FAOSTAT default to the USDA standard for compatibility with other datasets","title":".clean_up_eswatini"},{"location":"modules/src/utilities/import_utilities/#import_csv","text":"source .import_csv( csv_loc, col_names, iso3_col_name ) import the csv and load into a dictionary","title":".import_csv"},{"location":"modules/src/utilities/make_powerpoint/","text":"MakePowerpoint source Methods: .create_title_slide source .create_title_slide( the_title ) .insert_slide source .insert_slide( title_below, description, figure_save_loc ) .save_ppt source .save_ppt( pres_name )","title":"Make powerpoint"},{"location":"modules/src/utilities/make_powerpoint/#_1","text":"","title":""},{"location":"modules/src/utilities/make_powerpoint/#makepowerpoint","text":"source Methods:","title":"MakePowerpoint"},{"location":"modules/src/utilities/make_powerpoint/#create_title_slide","text":"source .create_title_slide( the_title )","title":".create_title_slide"},{"location":"modules/src/utilities/make_powerpoint/#insert_slide","text":"source .insert_slide( title_below, description, figure_save_loc )","title":".insert_slide"},{"location":"modules/src/utilities/make_powerpoint/#save_ppt","text":"source .save_ppt( pres_name )","title":".save_ppt"},{"location":"modules/src/utilities/plotter/","text":"Plotter source Methods: .helper_for_plotting_fig_3abcde source .helper_for_plotting_fig_3abcde( interpreter, xlim, gs, row, fig, max_y_percent ) .helper_for_plotting_fig_2abcde source .helper_for_plotting_fig_2abcde( ax, interpreter, xlim, title, add_ylabel = True, add_xlabel = True, ylim_constraint = 100000 ) .plot_fig_2abcd source .plot_fig_2abcd( interpreter1, interpreter2, xlim ) .plot_fig_3abcde_updated source .plot_fig_3abcde_updated( results, xlim ) .plot_fig_3ab source .plot_fig_3ab( monte_carlo_data, food_names, removed, added ) .plot_fig_s2abcd source .plot_fig_s2abcd( interpreter1, interpreter2, xlim1, xlim2 ) .getylim_nutrients source .getylim_nutrients( interpreter, xlim ) .plot_histogram source .plot_histogram( ax, data, N, xlabel, ylabel, title ) .plot_histogram_with_boxplot source .plot_histogram_with_boxplot( data, xlabel, title ) .get_people_fed_legend source .get_people_fed_legend( interpreter, is_nuclear_winter ) .plot_monthly_reductions_seasonally source .plot_monthly_reductions_seasonally( ratios ) .plot_monthly_reductions_no_seasonality source .plot_monthly_reductions_no_seasonality( all_months_reductions ) Plot the reduction each month, showing the seasonal variability. .plot_food source .plot_food( food, title ) Plot the food generically with the 3 macronutrients. .plot_food_alternative source .plot_food_alternative( food, title ) Plot the food generically with the 3 macronutrients (alternative layout).","title":"Plotter"},{"location":"modules/src/utilities/plotter/#_1","text":"","title":""},{"location":"modules/src/utilities/plotter/#plotter","text":"source Methods:","title":"Plotter"},{"location":"modules/src/utilities/plotter/#helper_for_plotting_fig_3abcde","text":"source .helper_for_plotting_fig_3abcde( interpreter, xlim, gs, row, fig, max_y_percent )","title":".helper_for_plotting_fig_3abcde"},{"location":"modules/src/utilities/plotter/#helper_for_plotting_fig_2abcde","text":"source .helper_for_plotting_fig_2abcde( ax, interpreter, xlim, title, add_ylabel = True, add_xlabel = True, ylim_constraint = 100000 )","title":".helper_for_plotting_fig_2abcde"},{"location":"modules/src/utilities/plotter/#plot_fig_2abcd","text":"source .plot_fig_2abcd( interpreter1, interpreter2, xlim )","title":".plot_fig_2abcd"},{"location":"modules/src/utilities/plotter/#plot_fig_3abcde_updated","text":"source .plot_fig_3abcde_updated( results, xlim )","title":".plot_fig_3abcde_updated"},{"location":"modules/src/utilities/plotter/#plot_fig_3ab","text":"source .plot_fig_3ab( monte_carlo_data, food_names, removed, added )","title":".plot_fig_3ab"},{"location":"modules/src/utilities/plotter/#plot_fig_s2abcd","text":"source .plot_fig_s2abcd( interpreter1, interpreter2, xlim1, xlim2 )","title":".plot_fig_s2abcd"},{"location":"modules/src/utilities/plotter/#getylim_nutrients","text":"source .getylim_nutrients( interpreter, xlim )","title":".getylim_nutrients"},{"location":"modules/src/utilities/plotter/#plot_histogram","text":"source .plot_histogram( ax, data, N, xlabel, ylabel, title )","title":".plot_histogram"},{"location":"modules/src/utilities/plotter/#plot_histogram_with_boxplot","text":"source .plot_histogram_with_boxplot( data, xlabel, title )","title":".plot_histogram_with_boxplot"},{"location":"modules/src/utilities/plotter/#get_people_fed_legend","text":"source .get_people_fed_legend( interpreter, is_nuclear_winter )","title":".get_people_fed_legend"},{"location":"modules/src/utilities/plotter/#plot_monthly_reductions_seasonally","text":"source .plot_monthly_reductions_seasonally( ratios )","title":".plot_monthly_reductions_seasonally"},{"location":"modules/src/utilities/plotter/#plot_monthly_reductions_no_seasonality","text":"source .plot_monthly_reductions_no_seasonality( all_months_reductions ) Plot the reduction each month, showing the seasonal variability.","title":".plot_monthly_reductions_no_seasonality"},{"location":"modules/src/utilities/plotter/#plot_food","text":"source .plot_food( food, title ) Plot the food generically with the 3 macronutrients.","title":".plot_food"},{"location":"modules/src/utilities/plotter/#plot_food_alternative","text":"source .plot_food_alternative( food, title ) Plot the food generically with the 3 macronutrients (alternative layout).","title":".plot_food_alternative"},{"location":"modules/src/utilities/print_parameters/","text":"PrintParameters source Methods: .print_constants_with_waste source .print_constants_with_waste( population, constants, time_consts, feed_and_biofuels, methane_scp, meat_and_dairy ) .print_constants_no_waste source .print_constants_no_waste( population, constants, time_consts, feed_and_biofuels, methane_scp, meat_and_dairy ) .print_constants source .print_constants( population, constants, time_consts, feed_and_biofuels, methane_scp, meat_and_dairy, CROP_WASTE, MEAT_WASTE, MILK_WASTE, FISH_WASTE )","title":"Print parameters"},{"location":"modules/src/utilities/print_parameters/#_1","text":"","title":""},{"location":"modules/src/utilities/print_parameters/#printparameters","text":"source Methods:","title":"PrintParameters"},{"location":"modules/src/utilities/print_parameters/#print_constants_with_waste","text":"source .print_constants_with_waste( population, constants, time_consts, feed_and_biofuels, methane_scp, meat_and_dairy )","title":".print_constants_with_waste"},{"location":"modules/src/utilities/print_parameters/#print_constants_no_waste","text":"source .print_constants_no_waste( population, constants, time_consts, feed_and_biofuels, methane_scp, meat_and_dairy )","title":".print_constants_no_waste"},{"location":"modules/src/utilities/print_parameters/#print_constants","text":"source .print_constants( population, constants, time_consts, feed_and_biofuels, methane_scp, meat_and_dairy, CROP_WASTE, MEAT_WASTE, MILK_WASTE, FISH_WASTE )","title":".print_constants"}]}